%{
	#include "attributes.hpp"
	#include "SymbolTable.hpp"
	#include <iostream>
	#include <vector>
	#include "output.hpp"
	#include "registers_pool.hpp"
	#include "bp.hpp"
	#include <sstream>

	using namespace std;
	using namespace output;

    SymbolTable symbolTable;
    vector<int> offsets;
    int inWhiles = 0;
    int inIfs =0;
    bool inFunction = false;
    string retLastFunction;
    int preCondCounter = 0;


    RegistersPool registerPool;

    extern int yylex();
    extern int yylineno;
	// #define YYDEBUG 1 
	void yyerror(const char*);
	void emitPrintIandPrint();
	void emitPreCondError(string function_name);

	void checkIfExpIsBool(Node* n, int yylineno){
		if (n->types.size() == 0){
			errorSyn(yylineno);
			exit(1);
		}

		if (n->types[0] != "BOOL"){
			errorMismatch(yylineno);
			exit(1);
		}
	};


	vector<string> argsTypesToStr(vector<string> args){
		vector<string> args_s;

		for (std::vector<string>::const_iterator it = args.begin(); 
			        	it != args.end(); ++it){
			args_s.push_back(*it);
		}
		return args_s;
	}
%}

%token EF
%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token TRUE
%token FALSE
%token RETURN
%nonassoc "then"
%nonassoc ELSE
%token IF
%token WHILE
%token BREAK
%token CONTINUE
%token PRECOND
%token SC
%token COMMA
%token LBRACE
%token RBRACE
%token ID
%token NUM
%token STRING
%left OR
%left AND 
%token ASSIGN
%nonassoc RELOP_EQ
%nonassoc RELOP
%left PLUS MINUS
%left MULT DIV
%right NOT
%token LPAREN
%token RPAREN

%%
program: M1 funcs EF
		{	
			// check if void main() is in tables if not error
			if (!symbolTable.checkIfFunctionExists("main")){
				errorMainMissing();
				exit(1);
			}
			if (symbolTable.getFunctionRetType("main") != "VOID"){
				errorMainMissing();
				exit(1);	
			}

			vector<string> args = symbolTable.getFunctionArgs("main");
			if (args.size() != 0){
				errorMainMissing();
				exit(1);		
			}

			// endScope();

			Table table = symbolTable.top();
			for (int i=0; i< table.entries.size(); i++){

				if (table.entries[i]->entry_type == "VARIABLE"){
					// printID(table.entries[i]->name, 
					// 		table.entries[i]->offset, 
					// 		table.entries[i]->type);
				}
				else if (table.entries[i]->entry_type == "FUNCTION"){
					vector<string> args = argsTypesToStr(symbolTable.getFunctionArgs(table.entries[i]->name));
					string type = makeFunctionType(table.entries[i]->ret_type, 
													args);
					// printID(table.entries[i]->name, 
					// 		0, 
					// 		type);
				}
			}
			symbolTable.pop();
			offsets.pop_back();

			CodeBuffer::instance().printDataBuffer();
            CodeBuffer::instance().printCodeBuffer(); 

			return 0;
		}
;
M1: /* epsilon */
	{
		symbolTable.maketable();
		offsets.push_back(0);
		symbolTable.insertFunctionPrint();
		symbolTable.insertFunctionPrintI();
		emitPrintIandPrint();
		
	}

funcs:	funcdecl funcs
		| /* epsilon */ 
;
funcdecl: retype ID LPAREN formals 
		{
			// initiate function
			// add function to symbol table in current scope
			// create new scope for function
			// add arguments to new scope

			preCondCounter = 0;
			inFunction = true;
			retLastFunction = $1->value;

			if (symbolTable.checkIfIdExists($2->value)){
    			errorDef(yylineno, $2->value);
    			exit(1);
			}


			symbolTable.insertFunction($2->value, 
										$1->value, 
										offsets.back(),
										$4->types);
			offsets.back();

			symbolTable.maketable();
			offsets.push_back(offsets.back());


			std::vector<string> args = symbolTable.getFunctionArgs($2->value);
			for (int i=0; i<args.size(); i++){
				symbolTable.insertVariable($4->names[i], $4->types[i], (i+1)*-1);
			}

			CodeBuffer::instance().emit($2->names[0] + ":");
			CodeBuffer::instance().emit("addu $fp, $sp, 0");
			CodeBuffer::instance().emitData($2->names[0]+"_data: \t .asciiz \t \""+$2->names[0]+"\"");

		} 
		  RPAREN preconditions M_BP {
		  	// RPAREN = $6
		  	if ((*$7->truelist).size() > 0){ // not null
		  		emitPreCondError($2->names[0]+"_data");
		  	}
		  } 

		  LBRACE M_BP statements RBRACE
		{	
			// RPAERN = $6
			// LBRACE $ 10
			// check if last statment in statements is return type which similar to retype
			

			// endScope();
			// printPreconditions($2->value, preCondCounter);
			Table table = symbolTable.top();
			for (int i=0; i< table.entries.size(); i++){

				// printID(table.entries[i]->name, 
				// 		table.entries[i]->offset, 
				// 		table.entries[i]->type);
			}

			inFunction = false;
			preCondCounter = 0;

			symbolTable.pop();
			offsets.pop_back();


			// cout << $1->value << endl;
			if ((*$7->truelist).size() > 0){
				CodeBuffer::instance().bpatch((*$7->truelist), $11->quad);
			}
			if ((*$7->truelist).size() > 0){
				CodeBuffer::instance().bpatch((*$7->falselist), $8->quad);
			}
			// CodeBuffer::instance().bpatch((*$6->truelist), $8->quad);

			// CodeBuffer::instance().emit("addu $sp, $fp, 0");
			// if ($1->value == "VOID"){
			CodeBuffer::instance().emit("addu $sp, $fp, 0");
			CodeBuffer::instance().emit("li $v0, 0"); // what is v0?
			CodeBuffer::instance().emit("jr $ra");
			// }

			// backpath all precond falselist to M_BP FAIL
			// backpath nextlist of statments to last M_BP
			// backpath nextlist of last precond to statments
			// cout << "finish declaring function " << endl;

		}
;
retype: type {$$->types[0] = $1->value;}
		| VOID { $$ = $1;}
		;
formals: formalslist {$$ = $1;}
		| /*epsilon*/ {$$ = new Node();}
;
formalslist: formaldecl {
				$$ = new Node();
				$$->names.push_back($1->names[0]);
				$$->types.push_back($1->types[0]);
			}
			| formaldecl COMMA formalslist {
				$$ = new Node();
				$$->names.push_back($1->names[0]);
				$$->types.push_back($1->types[0]);
				for (int i=0; i < $3->names.size(); ++i){
					$$->names.push_back($3->names[i]);
					$$->types.push_back($3->types[i]);
				}
			}
;
formaldecl: type ID 
			{
				$$ = new Node();
				$$->names.push_back($2->names[0]);
				$$->types.push_back($1->types[0]);

				if (symbolTable.checkIfIdExists($2->names[0])){
	    			errorDef(yylineno, $2->names[0]);
	    			exit(1);
				}
			}
;
preconditions: preconditions M_BP precondition 
				{
					$$ = new Node();
					CodeBuffer::instance().bpatch((*$1->truelist), $2->quad);
					$$->falselist = new vector<int>(CodeBuffer::instance().merge(*$1->falselist,*$3->falselist));
					delete $1->falselist;
					delete $2->falselist;
					$$->truelist = $3->truelist;
				}
				| /*epsilon*/  {
					$$ = new Node();
					$$->falselist = new vector<int>();;
					$$->truelist = new vector<int>();;
				}
;
precondition: PRECOND LPAREN exp RPAREN {
				checkIfExpIsBool($3, yylineno);
				preCondCounter += 1;

				// code - checking each exp somehow - already been coded in exp
				// truelist? to other precond
				// falselist? N_BP and will be backpathed
				$$ = new Node();
				$$->truelist = $3->truelist;
				$$->falselist = $3->falselist;
				
			}
;
statements: statement 
			{
				$$ = new Node();
				$$->continuelist = $1->continuelist;
				$$->breaklist = $1->breaklist;
			}
			| statements statement
			{
				$$ = new Node();
				if($1->breaklist != NULL && $2->breaklist != NULL)
				{
					$$->breaklist = new vector<int>(CodeBuffer::instance().merge(*$1->breaklist,*$2->breaklist));
					delete $1->breaklist;
					delete $2->breaklist;
				} 
				else if($1->breaklist == NULL)
				{
					$$->breaklist = $2->breaklist;
				} 
				else 
				{
					$$->breaklist = $1->breaklist;	
				}
				
				if($1->continuelist != NULL && $2->continuelist != NULL){
					$$->continuelist = new vector<int>(CodeBuffer::instance().merge(*$1->continuelist,*$2->continuelist));
					delete $1->continuelist;
					delete $2->continuelist;
				} 
				else if($1->continuelist == NULL)
				{
					$$->continuelist = $2->continuelist;
				} 
				else 
				{
					$$->continuelist = $1->continuelist;	
				}
			}
;
statement: N LBRACE statements RBRACE {
					// endScope();

					Table table = symbolTable.top();
					for (int i=0; i< table.entries.size(); i++){
						// printID(table.entries[i]->name, 
						// 		table.entries[i]->offset, 
						// 		table.entries[i]->type);
					}

					symbolTable.pop();
					
					int prev_offset = offsets.back();
					offsets.pop_back();

					$$ = new Node();
					$$->continuelist = $3->continuelist;
					$$->breaklist = $3->breaklist;
					CodeBuffer::instance().emit("addu $sp, $sp, "+intToString(4 * (prev_offset - offsets.back())));
				}
				| type ID SC {
					// check if ID is not already exists
					if (symbolTable.checkIfIdExists($2->names[0])){
						errorDef(yylineno, $2->names[0]);
						exit(1);
					}
					
					// initiate ID in symbol table with type
					symbolTable.insertVariable($2->names[0],$1->value,offsets.back());
					offsets.back() += 1;

					$$ = new Node();
					$$->types.push_back($1->value);
					$$->names.push_back($2->value);

					CodeBuffer::instance().emit("subu $sp, $sp, 4");
					CodeBuffer::instance().emit("sw $0, 0($sp)"); // what is it?
					$$->continuelist = NULL;
					$$->breaklist = NULL;

				}
				| type ID ASSIGN exp SC {
					// check if ID is not already exists
					if (symbolTable.checkIfIdExists($2->names[0])){
						errorDef(yylineno, $2->names[0]);
						exit(1);
					}
					
					if ($4->types.size() == 0){
						errorMismatch(yylineno);
						exit(1);
					}

					$$ = new Node();
					// exp should have the same type unless it is byte to int
					if ( $4->types[0] != $1->value){
						if ($4->types[0] == "BYTE" && $1->value == "INT"){
							symbolTable.insertVariable($2->names[0],$1->value,offsets.back());
							offsets.back() += 1;
						}
						else{
							errorMismatch(yylineno);
							exit(1);
						}
					}
					else{
						symbolTable.insertVariable($2->names[0],$1->value,offsets.back());
						offsets.back() += 1;
					}

					if ($4->types[0] != "BOOL") 
					{
						CodeBuffer::instance().emit("subu $sp, $sp, 4");
						CodeBuffer::instance().emit("sw $"+intToString($4->reg)+", 0($sp)");
						registerPool.deallocateRegister($4->reg);
					}
					else if( $4->types[0] == "BOOL")
					{
						$4->reg = registerPool.allocateRegister();
						// int offset = (-4) * symbolTable.getIdOffset($2->names[0]);

						string false_label = CodeBuffer::instance().genLabel();
						CodeBuffer::instance().emit("li $"+intToString($4->reg)+", 0");
						std::vector<int> next_backpatch = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j "));

						string true_label = CodeBuffer::instance().genLabel();
						CodeBuffer::instance().emit("li $"+intToString($4->reg)+", 1"); 

						string next_label = CodeBuffer::instance().genLabel();
						CodeBuffer::instance().bpatch((*$4->truelist), true_label);
						CodeBuffer::instance().bpatch((*$4->falselist), false_label);
						CodeBuffer::instance().bpatch(next_backpatch, next_label);
						CodeBuffer::instance().emit("subu $sp, $sp, 4");
						CodeBuffer::instance().emit("sw $"+intToString($4->reg)+", 0($sp)");
						registerPool.deallocateRegister($4->reg);
						
						$$->continuelist = NULL;
						$$->breaklist = NULL;
					}

				}
				| ID ASSIGN exp SC {
					// check if ID is exists
					if (!symbolTable.checkIfVariableExists($1->names[0])){
						errorUndef(yylineno, $1->names[0]);
						exit(1);
					}

					$1->types.push_back(symbolTable.getIdType($1->names[0]));
					// check id ID.type is equal to exp.type
					if ($3->types.size() == 0){
						errorMismatch(yylineno);
						exit(1);
					}
					if ($1->types[0] != $3->types[0] && 
						!($1->types[0] == "INT" && $3->types[0] =="BYTE")){
							errorMismatch(yylineno);
							exit(1);	
						}
					$$ = new Node();
					$$->types.push_back($1->types[0]);

					$$->continuelist = NULL;
                	$$->breaklist = NULL;
					if($1->types[0] == "INT" || $3->types[0] =="BYTE" || $3->types[0] == "STRING")
					{
						int offset = (-4) * symbolTable.getIdOffset($1->names[0]) - 4;
						
						CodeBuffer::instance().emit("sw $"+intToString($3->reg)+", "+intToString(offset)+"($fp)");
						registerPool.deallocateRegister($3->reg);
					}
					else if( $1->types[0] == "BOOL")
					{
						$3->reg = registerPool.allocateRegister();
						int offset = (-4) * symbolTable.getIdOffset($1->names[0]) - 4;
						


						string false_label = CodeBuffer::instance().genLabel();
						CodeBuffer::instance().emit("li $"+intToString($3->reg)+", 0");
						
						std::vector<int> next_backpatch = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j "));
						
						string true_label = CodeBuffer::instance().genLabel();
						CodeBuffer::instance().emit("li $"+intToString($3->reg)+", 1"); 

						string next_label = CodeBuffer::instance().genLabel();
						CodeBuffer::instance().bpatch((*$3->truelist), true_label);
						CodeBuffer::instance().bpatch((*$3->falselist), false_label);
						CodeBuffer::instance().bpatch(next_backpatch, next_label);
						CodeBuffer::instance().emit("sw $"+intToString($3->reg)+", "+intToString(offset)+"($fp)");
						registerPool.deallocateRegister($3->reg);
					}
				}
				| call SC M_BP{
					// something to do here?
					registerPool.deallocateRegister($1->reg);
					$$ = new Node();
					$$->continuelist = NULL;
					$$->breaklist = NULL;
					if($1->truelist != NULL){
						CodeBuffer::instance().bpatch((*$1->truelist), $3->quad);
						CodeBuffer::instance().bpatch((*$1->falselist), $3->quad);
					}
				}
				| RETURN SC {
					// only for functions with VOID or else Mismatch
					if (inFunction){
						// checkif last declared function is of rettype VOID
						if (retLastFunction != "VOID"){
							errorMismatch(yylineno);
							exit(1);
						}
						$$ = new Node();
						$$->continuelist = NULL;
						$$->breaklist = NULL;
						CodeBuffer::instance().emit("addu $sp, $fp, 0");
						CodeBuffer::instance().emit("li $v0, 0");
						CodeBuffer::instance().emit("jr $ra");
					}

				}
				| RETURN exp SC{
					// only for functions not in void or else Mismatch
					if (inFunction){
						// checkif last declared function is of rettype VOID

						if ((retLastFunction == "VOID")){
							errorMismatch(yylineno);
							exit(1);
						}
						else if ((retLastFunction == "INT") && ($2->types[0] != "INT")&&
							($2->types[0] != "BYTE") ){
							errorMismatch(yylineno);
							exit(1);
						}
						if ((retLastFunction == "BOOL") && ($2->types[0] != "BOOL") ){
							errorMismatch(yylineno);
							exit(1);
						}
						if ((retLastFunction == "BYTE") && ($2->types[0] != "BYTE")) {
							errorMismatch(yylineno);
							exit(1);
						}
						if ((retLastFunction == "STRING") && ($2->types[0] != "STRING") ){
							errorMismatch(yylineno);
							exit(1);
						}

						$$ = new Node();

						$$->continuelist = NULL;
						$$->breaklist = NULL;

						if($2->types[0] == "BOOL")
						{
							$2->reg = registerPool.allocateRegister();
							string f_label = CodeBuffer::instance().genLabel();
							CodeBuffer::instance().emit("li $"+intToString($2->reg)+", 0");

							std::vector<int> next_backpatch = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j "));
							
							string t_label = CodeBuffer::instance().genLabel();
							CodeBuffer::instance().emit("li $"+intToString($2->reg)+", 1"); 

							string next_label = CodeBuffer::instance().genLabel();
							CodeBuffer::instance().bpatch((*$2->truelist), t_label);
							CodeBuffer::instance().bpatch((*$2->falselist), f_label);
							CodeBuffer::instance().bpatch(next_backpatch, next_label);
						}
						CodeBuffer::instance().emit("addu $sp, $fp, 0");
						CodeBuffer::instance().emit("move $v0, $"+intToString($2->reg));
						CodeBuffer::instance().emit("jr $ra");
						registerPool.deallocateRegister($2->reg);
					}
				}
				| BREAK SC {
					// check if inside a while or forloop
					// else UnexpectedBreak;

					if (inWhiles == 0){
						errorUnexpectedBreak(yylineno);
						exit(1);
					}
					$$ = new Node();
					$$->breaklist = new vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j ")));
					$$->continuelist = NULL;
				}
				| CONTINUE SC {
					// check if inside a while or forloop
					// else UnexpectedContinue;
					if (inWhiles == 0){
						errorUnexpectedContinue(yylineno);
						exit(1);
					}
					$$ = new Node();
					$$->continuelist = new vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j ")));
					$$->breaklist = NULL;
				}
				| IF_SCOPE %prec "then"{
					CodeBuffer::instance().bpatch(*($1->truelist), $1->quad);
					CodeBuffer::instance().bpatch(*($1->falselist), CodeBuffer::instance().genLabel());

					$$ = new Node();
					$$->breaklist = $1->breaklist;
					$$->continuelist = $1->continuelist;
				}
				| IF_SCOPE ELSE_SCOPE M_BP{
					
					$$ = new Node();
					if($1->breaklist != NULL && $2->breaklist != NULL)
					{
						$$->breaklist = new vector<int>(CodeBuffer::instance().merge(*$1->breaklist,*$2->breaklist));
						delete $1->breaklist;
						delete $2->breaklist;
					} 
					else if($1->breaklist == NULL)
					{
						$$->breaklist = $2->breaklist;
					} 
					else 
					{
						$$->breaklist = $1->breaklist;	
					}
					if($1->continuelist != NULL && $2->continuelist != NULL)
					{
						$$->continuelist = new vector<int>(CodeBuffer::instance().merge(*$1->continuelist,*$2->continuelist));
						delete $1->continuelist;
						delete $2->continuelist;
					} 
					else if($1->continuelist == NULL)
					{
						$$->continuelist = $2->continuelist;
					} 
					else 
					{
						$$->continuelist = $1->continuelist;	
					}
					CodeBuffer::instance().bpatch(*($1->truelist), $1->quad);
					CodeBuffer::instance().bpatch(*($1->falselist), $2->quad);
					CodeBuffer::instance().bpatch(*($2->nextlist), $3->quad);

				}
				| WHILE_SCOPE %prec WHILE
;
IF_SCOPE: M_IF_SCOPE IF LPAREN exp {checkIfExpIsBool($4, $4->line_num);} RPAREN M_BP statement
		{
			// endScope();
			Table table = symbolTable.top();
			for (int i=0; i< table.entries.size(); i++){
				// printID(table.entries[i]->name, 
				// 		table.entries[i]->offset, 
				// 		table.entries[i]->type);
			}
			symbolTable.pop();
			offsets.pop_back();
			
			$$ = new Node();
			$$->breaklist = $8->breaklist;
			$$->continuelist = $8->continuelist;
			// $$.type = $3.type; 
			// $$.lineno = $3.lineno;
			$$->truelist = $4->truelist;
			$$->falselist =$4->falselist;
			$$->quad = $7->quad;
		}
;
M_IF_SCOPE:  /*epsilon*/ { 
			// std::cout << "start if scope" << std::endl;
			symbolTable.maketable(); 
			offsets.push_back(offsets.back());
		}
;
WHILE_SCOPE: M_WHILE_SCOPE WHILE LPAREN M_BP exp {checkIfExpIsBool($5, $5->line_num);} RPAREN M_BP statement N_BP M_BP
			{
				// endScope();
				Table table = symbolTable.top();
				for (int i=0; i< table.entries.size(); i++){
					// printID(table.entries[i]->name, 
					// 		table.entries[i]->offset, 
					// 		table.entries[i]->type);
				}
				symbolTable.pop();
				offsets.pop_back();
				inWhiles -= 1;

				$$ = new Node();
				//nested loops checking
				CodeBuffer::instance().bpatch(*($5->truelist), $8->quad);
				CodeBuffer::instance().bpatch(*($5->falselist), $11->quad);
				CodeBuffer::instance().bpatch(*($10->nextlist), $4->quad);
				if($9->breaklist != NULL)
				{
					CodeBuffer::instance().bpatch(*($9->breaklist), $11->quad);
				}
				if($9->continuelist != NULL)
				{
					CodeBuffer::instance().bpatch(*($9->continuelist), $4->quad);
				}
				$$->continuelist = NULL;
				$$->breaklist = NULL;
			}
;
M_WHILE_SCOPE: /*epsilon*/ { 
	// std::cout << "while if scope" << std::endl;
	symbolTable.maketable(); 
	offsets.push_back(offsets.back());
	inWhiles += 1;
}
; 
ELSE_SCOPE: ELSE N_BP M_ELSE_SCOPE M_BP statement {
	// endScope();
	Table table = symbolTable.top();
	for (int i=0; i< table.entries.size(); i++){
		// printID(table.entries[i]->name, 
		// 		table.entries[i]->offset, 
		// 		table.entries[i]->type);
	}
	symbolTable.pop();
	offsets.pop_back();

	$$ = new Node();
	$$->breaklist = $5->breaklist;
	$$->continuelist = $5->continuelist;
	// $$.type = $3.type; 
	// $$.lineno = $3.lineno;
	// $$->truelist = $3->truelist;
	// $$->falselist =$3->falselist;
	$$->quad = $4->quad;
	$$->nextlist = $2->nextlist;
}
;
M_ELSE_SCOPE: /*epsilon*/
	{
		symbolTable.maketable(); 
		offsets.push_back(offsets.back());
	}
;
N: /* epsilon */ {
		symbolTable.maketable();
		offsets.push_back(offsets.back());
	}

;

M_PROLOGUE: /*epsilon*/
	{
		registerPool.storeRegsInUse();
		registerPool.storeFramePointerReturnAddress();
	}

call: ID M_PROLOGUE LPAREN explist RPAREN
	{
		// call type is from Id type
		// explist must fit the function from symbol table
		//noamha check that func in syblme table - important!
		//noamha ID - name of the  funciton 
		if (!symbolTable.checkIfFunctionExists($1->names[0])){
			errorUndefFunc(yylineno, $1->names[0]);
			exit(1);
		}
		
		//noamha ret type of the funtions
		string rettype = symbolTable.getFunctionRetType($1->names[0]);
		std::vector<string> v_args = symbolTable.getFunctionArgs($1->names[0]);

        vector<string> v_args_s = argsTypesToStr(symbolTable.getFunctionArgs($1->names[0]));
		//check all arguments
		//noamha 
		if ($4->types.size() != v_args.size()){
			// error
			errorPrototypeMismatch(yylineno, $1->value, v_args_s);
			exit(1);
		}

		for (int i=0; i< $4->types.size(); i++){
			if (v_args[i] != $4->types[i]){
				if ((v_args[i] == "INT") && ($4->types[i] == "BYTE")){
					// do nothing
				}
				else{
					errorPrototypeMismatch(yylineno, $1->value, v_args_s);
					exit(1);
				}
			}
		}

		//<noamha
		//noamha here need to add all code:
		//open scope, calling convention
		//need to have in the symle table the label to jump - we will do it later
		string funcLabel = $1->names[0];
		registerPool.jumpAndLink(funcLabel);

		CodeBuffer::instance().emit("addu $sp, $sp, "+intToString($4->types.size()*4));

		/*close frame for arguments that were passed on the stack :num of arguments on the stack * 4 */
		
		registerPool.restoreReturnAddressFramePointer();
		registerPool.restoreRegsInUse();
		
		//noamha>

		$$ = new Node();
		string s_retype = rettype;
		$$->types.push_back(s_retype);

		$$->reg = registerPool.allocateRegister();

		CodeBuffer::instance().emit("addu $"+intToString($$->reg)+", $v0, 0");
		if (s_retype == "BOOL")
		{
			$$->falselist = new std::vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("beq $"+intToString($$->reg)+",0, ")));
			$$->truelist =  new std::vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j ")));
			registerPool.deallocateRegister($$->reg);
        }

		//nothing if VOID
		$$->nonterminal = "call";
		$$->line_num = yylineno;


	}
	| ID M_PROLOGUE LPAREN RPAREN
	{
		// call type is from Id type
		// empty explist must fit the function from symbol table

		if (!symbolTable.checkIfFunctionExists($1->names[0])){
			errorUndefFunc(yylineno, $1->names[0]);
			exit(1);
		}

		
		string rettype = symbolTable.getFunctionRetType($1->names[0]);
		std::vector<string> args = symbolTable.getFunctionArgs($1->names[0]);

		vector<string> args_s = argsTypesToStr(symbolTable.getFunctionArgs($1->names[0]));
		//check all arguments
		if (args.size() != 0){
			// error
			errorPrototypeMismatch(yylineno, $1->value, args_s);
			exit(1);
		}

		registerPool.jumpAndLink($1->names[0]);
		// CodeBuffer::instance().emit("addu $sp, $sp, "+intToString($4->types.size()*4));
		registerPool.restoreReturnAddressFramePointer();
		registerPool.restoreRegsInUse();

		$$ = new Node();

		if (rettype == "VOID"){
			// do nothing
		}
		else{
			$$->types.push_back(rettype);
		}
		
		$$->reg = registerPool.allocateRegister();
		CodeBuffer::instance().emit("addu $"+intToString($$->reg)+", $v0, 0");

		if($$->types.size() > 0 && $$->types[0] ==  "BOOL")
		{
			$$->falselist = new std::vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("beq $"+intToString($$->reg)+",0, ")));
			$$->truelist =  new std::vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j ")));

			registerPool.deallocateRegister($$->reg);
		}


		$$->nonterminal = "call";
		$$->line_num = yylineno;
	}
;
explist: exp
	{ 
		$$ = $1;
		
		if($1->types[0] == "INT" || $1->types[0]=="BYTE")
		{
			CodeBuffer::instance().emit("subu $sp, $sp, 4");
			CodeBuffer::instance().emit("sw $"+intToString($1->reg)+", ($sp)");
            //regs.deallocReg($1.reg);			
		}
		else if ($1->types[0]=="BOOL")
		{
 			$1->reg = registerPool.allocateRegister();

 			string f_label = CodeBuffer::instance().genLabel();
			CodeBuffer::instance().emit("li $"+intToString($1->reg)+", 0");
	        std::vector<int> next_bp = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j "));
 			string t_label = CodeBuffer::instance().genLabel();
	        CodeBuffer::instance().emit("li $"+intToString($1->reg)+", 1"); 
 			string next_label = CodeBuffer::instance().genLabel();
 			CodeBuffer::instance().bpatch((*$1->truelist), t_label);
 			CodeBuffer::instance().bpatch((*$1->falselist), f_label);
 			CodeBuffer::instance().bpatch(next_bp, next_label);

 			CodeBuffer::instance().emit("subu $sp, $sp, 4");
 			CodeBuffer::instance().emit("sw $"+ intToString($1->reg)+", ($sp)"); 			
    		registerPool.deallocateRegister($1->reg);
		}
		else if ($1->types[0]=="STRING")
		{

			int reg = registerPool.allocateRegister();
 			string label = CodeBuffer::instance().genLabel();
	        string label_str =  label + "_msg:    .asciiz    " + $1->value;
			CodeBuffer::instance().emitData(label_str);
			//la rdest, mem - why used label?
			CodeBuffer::instance().emit("la $"+intToString(reg)+", "+label + "_msg");
			CodeBuffer::instance().emit("subu $sp, $sp, 4");
		    CodeBuffer::instance().emit("sw $"+intToString(reg)+", ($sp)");
		    
		    registerPool.deallocateRegister(reg);


		}
		//noamha>
	}
		| exp 
		{


			if ($1->types[0] ==  "BOOL")
			{
				
				$1->reg = registerPool.allocateRegister();

				string f_label = CodeBuffer::instance().genLabel();
				CodeBuffer::instance().emit("li $"+intToString($1->reg)+", 0");
				std::vector<int> next_bp = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j "));
				string t_label = CodeBuffer::instance().genLabel();
				CodeBuffer::instance().emit("li $"+intToString($1->reg)+", 1"); 
				string next_label = CodeBuffer::instance().genLabel();
				CodeBuffer::instance().bpatch((*$1->truelist), t_label);
				CodeBuffer::instance().bpatch((*$1->falselist), f_label);
				CodeBuffer::instance().bpatch(next_bp, next_label);
			}
		}

		COMMA explist {
			if($1->types[0]=="INT" || $1->types[0]=="BYTE" || $1->types[0] == "BOOL")
			{
				// noamka what about BOOL ? they don;t have any register, the compiler will fault.
				CodeBuffer::instance().emit("subu $sp, $sp, 4");
				CodeBuffer::instance().emit("sw $"+intToString($1->reg) + ", 0($sp)");
				registerPool.deallocateRegister($1->reg);
			}
			else if($1->types[0]=="STRING")
			{
				int reg = registerPool.allocateRegister();
 				string label = CodeBuffer::instance().genLabel();
	        	string label_str =  label + "_msg:    .asciiz    " + $1->value;
				CodeBuffer::instance().emitData(label_str);
				//la rdest, mem - why used label?
				CodeBuffer::instance().emit("la $"+intToString(reg)+", "+label_str);
				CodeBuffer::instance().emit("subu $sp, $sp, 4");
		    	CodeBuffer::instance().emit("sw $"+intToString(reg)+", ($sp)");
		    	registerPool.deallocateRegister($1->reg);
			}

			// else if ($1->types[0] ==  "BOOL")
			// {
			// 	$1->reg = registerPool.allocateRegister();

			// 	string f_label = CodeBuffer::instance().genLabel();
			// 	CodeBuffer::instance().emit("li $"+intToString($1->reg)+", 0");
			// 	std::vector<int> next_bp = CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j "));
			// 	string t_label = CodeBuffer::instance().genLabel();
			// 	CodeBuffer::instance().emit("li $"+intToString($1->reg)+", 1"); 
			// 	string next_label = CodeBuffer::instance().genLabel();
			// 	CodeBuffer::instance().bpatch((*$1->truelist), t_label);
			// 	CodeBuffer::instance().bpatch((*$1->falselist), f_label);
			// 	CodeBuffer::instance().bpatch(next_bp, next_label);

			// 	CodeBuffer::instance().emit("subu $sp, $sp, 4");
			// 	CodeBuffer::instance().emit("sw $"+intToString($1->reg)+", ($sp)");
			// 	registerPool.deallocateRegister($1->reg);
			// }
			//<noamha
			$$ = new Node();
			$$->types.push_back($1->types[0]);

			for (int i=0; i< $4->types.size(); ++i){
				$$->types.push_back($4->types[i]);
			}
			$$->line_num = $1->line_num;
		}
;
type: INT {$$ = $1; $$->line_num = yylineno;}//{$$.value = "int";}
	| BYTE {$$ = $1; $$->line_num = yylineno;}//{$$.value = "byte";} //cannot represent value > 255
	| BOOL {$$ = $1; $$->line_num = yylineno;}//{$$.value = "bool";} 
;

exp: LPAREN exp RPAREN { $$ = $2;}
	| exp PLUS exp {
		$$ = new BinOp($1, $3, "PLUS", yylineno);
		$$->reg = $1->reg;
		registerPool.deallocateRegister($3->reg);
	    CodeBuffer::instance().emit("addu $"+intToString($1->reg)+", $"+intToString($1->reg)+", $"+intToString($3->reg));
	        
	    // if (strcmp($$->types[0],"BYTE") == 0) {
	    if ($$->types[0] == "BYTE") {
	        CodeBuffer::instance().emit("and $"+intToString($$->reg)+", $"+intToString($$->reg)+", 255");
	    }

	}
	| exp MINUS exp {
		$$ = new BinOp($1, $3, "MINUS", yylineno);

		$$->reg = $1->reg;
		registerPool.deallocateRegister($3->reg);
		CodeBuffer::instance().emit("subu $"+intToString($1->reg)+", $"+intToString($1->reg)+", $"+intToString($3->reg));
		if($$->types[0]=="BYTE"){
			CodeBuffer::instance().emit("and $"+intToString($$->reg)+", $"+intToString($$->reg)+", 255");
		}

		// CodeBuffer::instance().emit("subu $"+its($1.reg)+", $"+its($1.reg)+", $"+its($3.reg));

	}
	| exp MULT exp {
		$$ = new BinOp($1, $3, "MULT", yylineno);

		$$->reg = $1->reg;
		registerPool.deallocateRegister($3->reg);
		CodeBuffer::instance().emit("mul $"+intToString($1->reg)+", $"+intToString($1->reg)+", $"+intToString($3->reg));
		if($$->types[0]=="BYTE"){
			CodeBuffer::instance().emit("and $"+intToString($$->reg)+", $"+intToString($$->reg)+", 255");
		}
	}
	| exp DIV exp {
		$$ = new BinOp($1, $3, "DIV", yylineno);

		$$->reg = $1->reg;
		registerPool.deallocateRegister($3->reg);
		CodeBuffer::instance().emit("beq $"+intToString($3->reg)+", 0, devided_by_zero");
		CodeBuffer::instance().emit("div $"+intToString($1->reg)+", $"+intToString($1->reg)+", $"+intToString($3->reg));
		if($$->types[0]=="BYTE"){
			CodeBuffer::instance().emit("and $"+intToString($1->reg)+", $"+intToString($1->reg)+", 255");
		}
	}
	| ID {
		//noamha: need to check that it exsits in all scopes
		if (!symbolTable.checkIfVariableExists($1->names[0])){
			errorUndef(yylineno, $1->names[0]);
			exit(1);
		}
		string type = symbolTable.getIdType($1->names[0]);
		$1->types.push_back(type);
		$$ = $1;
		//noamha: hw 5:
		//alocate reg only if it's not boolean
		$$->line_num = yylineno;
		if(type == "INT" || type == "BYTE" || type == "STRING" || type == "BOOL"){
			$$->reg = registerPool.allocateRegister();
			//noamha: when it finds the var it gets in offset
			int offset = symbolTable.getIdOffset($1->names[0]);
			// cout << "offset " << offset << endl;
			offset = (-4) * offset - 4;
			
			// CodeBuffer::instance().emit("#"+intToString(offset));
			CodeBuffer::instance().emit("lw $"+intToString($$->reg)+", "+intToString(offset)+"($fp)");
			if(type ==  "BOOL")
			{
				$$->falselist = new std::vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("beq $"+intToString($$->reg)+",0, ")));
				$$->truelist =  new std::vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j ")));

				registerPool.deallocateRegister($$->reg);
			}
		}
		
	}
	| call {
		$$ = $1;
		$$->line_num = yylineno;
		$$->falselist = $1->falselist;
		$$->truelist = $1->truelist;
		$$->reg = $1->reg;
	}
	| NUM {
		$$ = $1;
		$$->line_num = yylineno;
		$$->reg = registerPool.allocateRegister();
      	
        CodeBuffer::instance().emit("li $"+ intToString($$->reg) + ", " + $1->value);
	}
	| NUM B {
		$$ = new NumByte($1->value, yylineno);

	  	int res =  $1->value_t % 256;
	  	
	    $$->value = intToString(res);
	    $$->value_t = res;
	    $$->reg = registerPool.allocateRegister();
	    std::stringstream buff;
	    buff <<"li $"<<$$->reg<<", "<<$1;
	    CodeBuffer::instance().emit("li $" + intToString($$->reg) + ", " + $$->value);
	}
	| STRING {
		$$ = $1; 
		$$->line_num = yylineno;
	}
	| TRUE {
		// cout << "true" << endl;
		$$ = $1; 
		$$->line_num = yylineno;
		$$->falselist= new vector<int>();
		$$->truelist = new vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j ")));
	}
	| FALSE {

		// cout << yylineno <<"false" << endl;

		$$ = $1; 
		$$->line_num = yylineno;
		$$->truelist= new vector<int>();
		$$->falselist = new vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j ")));
	}
	| NOT exp {
		$$ = new Not($2, yylineno);
		$$->truelist = $2->falselist;
        $$->falselist = $2->truelist;
	}
	
	| exp AND M_BP exp {
		$$ = new BoolOp($1, $4, $2->value, yylineno);
		CodeBuffer::instance().bpatch(*($1->truelist), $3->quad);
		$$->truelist = $4->truelist;
		$$->falselist = new vector<int>(CodeBuffer::instance().merge(*($1->falselist),*($4->falselist)));
	}
	
	| exp OR M_BP exp {
		// cout << yylineno << "or " << endl;
		$$ = new BoolOp($1, $4, $2->value, yylineno);

		CodeBuffer::instance().bpatch(*($1->falselist), $3->quad);
		$$->truelist = new vector<int>(CodeBuffer::instance().merge(*($1->truelist),*($4->truelist)));
		$$->falselist = $4->falselist;

	}
	
	| exp RELOP_EQ exp {
		$$ = new Relop($1, $3, $2->value, yylineno);
		if ($2->value == "=="){
			$$->truelist = new std::vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("beq $"+intToString($1->reg)+", $"+intToString($3->reg)+", ")));
		}
		else if ($2->value == "!="){
			$$->truelist = new std::vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("bne $"+intToString($1->reg)+", $"+intToString($3->reg)+", ")));
		}
		$$->falselist = new std::vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j ")));
		registerPool.deallocateRegister($1->reg);
		registerPool.deallocateRegister($3->reg);
	}
	
	| exp RELOP exp {
		$$ = new Relop($1, $3, $2->value, yylineno);
		if ($2->value == ">="){
			$$->truelist = new std::vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("bge $"+intToString($1->reg)+", $"+intToString($3->reg)+", ")));
		}
		else if ($2->value == ">"){
			$$->truelist = new std::vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("bgt $"+intToString($1->reg)+", $"+intToString($3->reg)+", ")));
		}
		else if ($2->value == "<="){
			$$->truelist = new std::vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("ble $"+intToString($1->reg)+", $"+intToString($3->reg)+", ")));
		}
		else if ($2->value == "<"){
			$$->truelist = new std::vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("blt $"+intToString($1->reg)+", $"+intToString($3->reg)+", ")));
		}
		$$->falselist = new std::vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j ")));
		registerPool.deallocateRegister($1->reg);
		registerPool.deallocateRegister($3->reg);
	}

;
N_BP: /*epsilon*/ 	
	{ 
		$$ = new Node();
		$$->nextlist = new vector<int>(CodeBuffer::instance().makelist(CodeBuffer::instance().emit("j "))); 
	}
;
M_BP: /*epsilon*/ 	
	{ 
		$$ = new Node();
		// $$->label = strdup(CodeBuffer::instance().genLabel().c_str()); 
		$$->quad = CodeBuffer::instance().genLabel();
		// std::cout << $$->quad << endl;
	}
;

%%

int main() 
{
	return yyparse();
}

void yyerror(const char*) 
{
	errorSyn(yylineno);
}


void emitPrintIandPrint(){
	//printi
	CodeBuffer::instance().emit("print:");
	CodeBuffer::instance().emit("lw $a0, 0($sp)");
	CodeBuffer::instance().emit("li $v0,4");
	CodeBuffer::instance().emit("syscall");
	CodeBuffer::instance().emit("jr $ra");

 	// print
 	CodeBuffer::instance().emit("printi:");
 	CodeBuffer::instance().emit("lw $a0, 0($sp)");
	CodeBuffer::instance().emit("li $v0, 1");
	CodeBuffer::instance().emit("syscall");
	CodeBuffer::instance().emit("jr $ra");

	// divided by zero
	CodeBuffer::instance().emit("devided_by_zero:");
  	CodeBuffer::instance().emit("la $a0, devided_by_zero_msg");
	CodeBuffer::instance().emit("li $v0, 4");
	CodeBuffer::instance().emit("syscall");
	CodeBuffer::instance().emit("li $v0, 10");
	CodeBuffer::instance().emit("syscall");
  	CodeBuffer::instance().emitData("devided_by_zero_msg: \t .asciiz \t \"Error division by zero\n\"");


  	// Precondition hasn't been satisfied for function <function_name>\n
	CodeBuffer::instance().emitData("new_line: \t .asciiz \t \"\n\"");
	CodeBuffer::instance().emitData("prcond_false_msg: \t .asciiz \t \"Precondition hasn't been satisfied for function \"");
}

void emitPreCondError(string function_name){
	// CodeBuffer::instance().emit("prcond_false:");
  	CodeBuffer::instance().emit("la $a0, prcond_false_msg");
	CodeBuffer::instance().emit("li $v0, 4");
	CodeBuffer::instance().emit("syscall");

	CodeBuffer::instance().emit("la $a0, "+function_name);
	CodeBuffer::instance().emit("li $v0, 4");
	CodeBuffer::instance().emit("syscall");


	CodeBuffer::instance().emit("la $a0, new_line");
	CodeBuffer::instance().emit("li $v0, 4");
	CodeBuffer::instance().emit("syscall");

	CodeBuffer::instance().emit("li $v0, 10"); // terminate
	CodeBuffer::instance().emit("syscall");
}
 
 