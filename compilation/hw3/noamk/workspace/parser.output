Terminals unused in grammar

   RELOP_EQ
   EF


Grammar

    0 $accept: program $end

    1 program: funcs

    2 funcs: funcdecl funcs
    3      | %empty

    4 funcdecl: retype ID LPAREN formals RPAREN preconditions LBRACE statements RBRACE

    5 retype: type
    6       | VOID

    7 formals: formalslist
    8        | %empty

    9 formalslist: formaldecl
   10            | formaldecl COMMA formalslist

   11 formaldecl: type ID

   12 preconditions: preconditions precondition
   13              | %empty

   14 precondition: PRECOND LPAREN exp RPAREN

   15 statements: statement
   16           | statements statement

   17 statement: open_statement
   18          | closed_statement

   19 open_statement: IF LPAREN exp RPAREN simple_statement
   20               | IF LPAREN exp RPAREN open_statement
   21               | IF LPAREN exp RPAREN closed_statement ELSE open_statement
   22               | WHILE LPAREN exp RPAREN open_statement

   23 closed_statement: simple_statement
   24                 | IF LPAREN exp RPAREN closed_statement ELSE closed_statement
   25                 | WHILE LPAREN exp RPAREN closed_statement

   26 simple_statement: LBRACE statements RBRACE
   27                 | type ID SC
   28                 | type ID ASSIGN exp SC
   29                 | ID ASSIGN exp SC
   30                 | call SC
   31                 | RETURN SC
   32                 | RETURN exp SC
   33                 | BREAK SC
   34                 | CONTINUE SC

   35 call: ID LPAREN explist RPAREN
   36     | ID LPAREN RPAREN

   37 explist: exp
   38        | exp COMMA explist

   39 type: INT
   40     | BYTE
   41     | BOOL

   42 exp: LPAREN exp RPAREN
   43    | ID exprest
   44    | NUM exprest
   45    | NUM B exprest
   46    | STRING exprest
   47    | TRUE exprest
   48    | FALSE exprest
   49    | NOT exp

   50 exprest: %empty
   51        | BINOP_PM exp
   52        | BINOP_MD exp
   53        | AND exp
   54        | OR exp
   55        | RELOP exp


Terminals, with rules where they appear

$end (0) 0
error (256)
ASSIGN (258) 28 29
RELOP_EQ (259)
RELOP (260) 55
BINOP_PM (261) 51
BINOP_MD (262) 52
VOID (263) 6
INT (264) 39
BYTE (265) 40
B (266) 45
BOOL (267) 41
AND (268) 53
OR (269) 54
NOT (270) 49
TRUE (271) 47
FALSE (272) 48
RETURN (273) 31 32
IF (274) 19 20 21 24
ELSE (275) 21 24
WHILE (276) 22 25
BREAK (277) 33
CONTINUE (278) 34
PRECOND (279) 14
SC (280) 27 28 29 30 31 32 33 34
COMMA (281) 10 38
LPAREN (282) 4 14 19 20 21 22 24 25 35 36 42
RPAREN (283) 4 14 19 20 21 22 24 25 35 36 42
LBRACE (284) 4 26
RBRACE (285) 4 26
ID (286) 4 11 27 28 29 35 36 43
NUM (287) 44 45
STRING (288) 46
EF (289)


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
program (36)
    on left: 1, on right: 0
funcs (37)
    on left: 2 3, on right: 1 2
funcdecl (38)
    on left: 4, on right: 2
retype (39)
    on left: 5 6, on right: 4
formals (40)
    on left: 7 8, on right: 4
formalslist (41)
    on left: 9 10, on right: 7 10
formaldecl (42)
    on left: 11, on right: 9 10
preconditions (43)
    on left: 12 13, on right: 4 12
precondition (44)
    on left: 14, on right: 12
statements (45)
    on left: 15 16, on right: 4 16 26
statement (46)
    on left: 17 18, on right: 15 16
open_statement (47)
    on left: 19 20 21 22, on right: 17 20 21 22
closed_statement (48)
    on left: 23 24 25, on right: 18 21 24 25
simple_statement (49)
    on left: 26 27 28 29 30 31 32 33 34, on right: 19 23
call (50)
    on left: 35 36, on right: 30
explist (51)
    on left: 37 38, on right: 35 38
type (52)
    on left: 39 40 41, on right: 5 11 27 28
exp (53)
    on left: 42 43 44 45 46 47 48 49, on right: 14 19 20 21 22 24 25
    28 29 32 37 38 42 49 51 52 53 54 55
exprest (54)
    on left: 50 51 52 53 54 55, on right: 43 44 45 46 47 48


State 0

    0 $accept: . program $end

    VOID  shift, and go to state 1
    INT   shift, and go to state 2
    BYTE  shift, and go to state 3
    BOOL  shift, and go to state 4

    $default  reduce using rule 3 (funcs)

    program   go to state 5
    funcs     go to state 6
    funcdecl  go to state 7
    retype    go to state 8
    type      go to state 9


State 1

    6 retype: VOID .

    $default  reduce using rule 6 (retype)


State 2

   39 type: INT .

    $default  reduce using rule 39 (type)


State 3

   40 type: BYTE .

    $default  reduce using rule 40 (type)


State 4

   41 type: BOOL .

    $default  reduce using rule 41 (type)


State 5

    0 $accept: program . $end

    $end  shift, and go to state 10


State 6

    1 program: funcs .

    $default  reduce using rule 1 (program)


State 7

    2 funcs: funcdecl . funcs

    VOID  shift, and go to state 1
    INT   shift, and go to state 2
    BYTE  shift, and go to state 3
    BOOL  shift, and go to state 4

    $default  reduce using rule 3 (funcs)

    funcs     go to state 11
    funcdecl  go to state 7
    retype    go to state 8
    type      go to state 9


State 8

    4 funcdecl: retype . ID LPAREN formals RPAREN preconditions LBRACE statements RBRACE

    ID  shift, and go to state 12


State 9

    5 retype: type .

    $default  reduce using rule 5 (retype)


State 10

    0 $accept: program $end .

    $default  accept


State 11

    2 funcs: funcdecl funcs .

    $default  reduce using rule 2 (funcs)


State 12

    4 funcdecl: retype ID . LPAREN formals RPAREN preconditions LBRACE statements RBRACE

    LPAREN  shift, and go to state 13


State 13

    4 funcdecl: retype ID LPAREN . formals RPAREN preconditions LBRACE statements RBRACE

    INT   shift, and go to state 2
    BYTE  shift, and go to state 3
    BOOL  shift, and go to state 4

    $default  reduce using rule 8 (formals)

    formals      go to state 14
    formalslist  go to state 15
    formaldecl   go to state 16
    type         go to state 17


State 14

    4 funcdecl: retype ID LPAREN formals . RPAREN preconditions LBRACE statements RBRACE

    RPAREN  shift, and go to state 18


State 15

    7 formals: formalslist .

    $default  reduce using rule 7 (formals)


State 16

    9 formalslist: formaldecl .
   10            | formaldecl . COMMA formalslist

    COMMA  shift, and go to state 19

    $default  reduce using rule 9 (formalslist)


State 17

   11 formaldecl: type . ID

    ID  shift, and go to state 20


State 18

    4 funcdecl: retype ID LPAREN formals RPAREN . preconditions LBRACE statements RBRACE

    $default  reduce using rule 13 (preconditions)

    preconditions  go to state 21


State 19

   10 formalslist: formaldecl COMMA . formalslist

    INT   shift, and go to state 2
    BYTE  shift, and go to state 3
    BOOL  shift, and go to state 4

    formalslist  go to state 22
    formaldecl   go to state 16
    type         go to state 17


State 20

   11 formaldecl: type ID .

    $default  reduce using rule 11 (formaldecl)


State 21

    4 funcdecl: retype ID LPAREN formals RPAREN preconditions . LBRACE statements RBRACE
   12 preconditions: preconditions . precondition

    PRECOND  shift, and go to state 23
    LBRACE   shift, and go to state 24

    precondition  go to state 25


State 22

   10 formalslist: formaldecl COMMA formalslist .

    $default  reduce using rule 10 (formalslist)


State 23

   14 precondition: PRECOND . LPAREN exp RPAREN

    LPAREN  shift, and go to state 26


State 24

    4 funcdecl: retype ID LPAREN formals RPAREN preconditions LBRACE . statements RBRACE

    INT       shift, and go to state 2
    BYTE      shift, and go to state 3
    BOOL      shift, and go to state 4
    RETURN    shift, and go to state 27
    IF        shift, and go to state 28
    WHILE     shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    LBRACE    shift, and go to state 32
    ID        shift, and go to state 33

    statements        go to state 34
    statement         go to state 35
    open_statement    go to state 36
    closed_statement  go to state 37
    simple_statement  go to state 38
    call              go to state 39
    type              go to state 40


State 25

   12 preconditions: preconditions precondition .

    $default  reduce using rule 12 (preconditions)


State 26

   14 precondition: PRECOND LPAREN . exp RPAREN

    NOT     shift, and go to state 41
    TRUE    shift, and go to state 42
    FALSE   shift, and go to state 43
    LPAREN  shift, and go to state 44
    ID      shift, and go to state 45
    NUM     shift, and go to state 46
    STRING  shift, and go to state 47

    exp  go to state 48


State 27

   31 simple_statement: RETURN . SC
   32                 | RETURN . exp SC

    NOT     shift, and go to state 41
    TRUE    shift, and go to state 42
    FALSE   shift, and go to state 43
    SC      shift, and go to state 49
    LPAREN  shift, and go to state 44
    ID      shift, and go to state 45
    NUM     shift, and go to state 46
    STRING  shift, and go to state 47

    exp  go to state 50


State 28

   19 open_statement: IF . LPAREN exp RPAREN simple_statement
   20               | IF . LPAREN exp RPAREN open_statement
   21               | IF . LPAREN exp RPAREN closed_statement ELSE open_statement
   24 closed_statement: IF . LPAREN exp RPAREN closed_statement ELSE closed_statement

    LPAREN  shift, and go to state 51


State 29

   22 open_statement: WHILE . LPAREN exp RPAREN open_statement
   25 closed_statement: WHILE . LPAREN exp RPAREN closed_statement

    LPAREN  shift, and go to state 52


State 30

   33 simple_statement: BREAK . SC

    SC  shift, and go to state 53


State 31

   34 simple_statement: CONTINUE . SC

    SC  shift, and go to state 54


State 32

   26 simple_statement: LBRACE . statements RBRACE

    INT       shift, and go to state 2
    BYTE      shift, and go to state 3
    BOOL      shift, and go to state 4
    RETURN    shift, and go to state 27
    IF        shift, and go to state 28
    WHILE     shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    LBRACE    shift, and go to state 32
    ID        shift, and go to state 33

    statements        go to state 55
    statement         go to state 35
    open_statement    go to state 36
    closed_statement  go to state 37
    simple_statement  go to state 38
    call              go to state 39
    type              go to state 40


State 33

   29 simple_statement: ID . ASSIGN exp SC
   35 call: ID . LPAREN explist RPAREN
   36     | ID . LPAREN RPAREN

    ASSIGN  shift, and go to state 56
    LPAREN  shift, and go to state 57


State 34

    4 funcdecl: retype ID LPAREN formals RPAREN preconditions LBRACE statements . RBRACE
   16 statements: statements . statement

    INT       shift, and go to state 2
    BYTE      shift, and go to state 3
    BOOL      shift, and go to state 4
    RETURN    shift, and go to state 27
    IF        shift, and go to state 28
    WHILE     shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    LBRACE    shift, and go to state 32
    RBRACE    shift, and go to state 58
    ID        shift, and go to state 33

    statement         go to state 59
    open_statement    go to state 36
    closed_statement  go to state 37
    simple_statement  go to state 38
    call              go to state 39
    type              go to state 40


State 35

   15 statements: statement .

    $default  reduce using rule 15 (statements)


State 36

   17 statement: open_statement .

    $default  reduce using rule 17 (statement)


State 37

   18 statement: closed_statement .

    $default  reduce using rule 18 (statement)


State 38

   23 closed_statement: simple_statement .

    $default  reduce using rule 23 (closed_statement)


State 39

   30 simple_statement: call . SC

    SC  shift, and go to state 60


State 40

   27 simple_statement: type . ID SC
   28                 | type . ID ASSIGN exp SC

    ID  shift, and go to state 61


State 41

   49 exp: NOT . exp

    NOT     shift, and go to state 41
    TRUE    shift, and go to state 42
    FALSE   shift, and go to state 43
    LPAREN  shift, and go to state 44
    ID      shift, and go to state 45
    NUM     shift, and go to state 46
    STRING  shift, and go to state 47

    exp  go to state 62


State 42

   47 exp: TRUE . exprest

    RELOP     shift, and go to state 63
    BINOP_PM  shift, and go to state 64
    BINOP_MD  shift, and go to state 65
    AND       shift, and go to state 66
    OR        shift, and go to state 67

    $default  reduce using rule 50 (exprest)

    exprest  go to state 68


State 43

   48 exp: FALSE . exprest

    RELOP     shift, and go to state 63
    BINOP_PM  shift, and go to state 64
    BINOP_MD  shift, and go to state 65
    AND       shift, and go to state 66
    OR        shift, and go to state 67

    $default  reduce using rule 50 (exprest)

    exprest  go to state 69


State 44

   42 exp: LPAREN . exp RPAREN

    NOT     shift, and go to state 41
    TRUE    shift, and go to state 42
    FALSE   shift, and go to state 43
    LPAREN  shift, and go to state 44
    ID      shift, and go to state 45
    NUM     shift, and go to state 46
    STRING  shift, and go to state 47

    exp  go to state 70


State 45

   43 exp: ID . exprest

    RELOP     shift, and go to state 63
    BINOP_PM  shift, and go to state 64
    BINOP_MD  shift, and go to state 65
    AND       shift, and go to state 66
    OR        shift, and go to state 67

    $default  reduce using rule 50 (exprest)

    exprest  go to state 71


State 46

   44 exp: NUM . exprest
   45    | NUM . B exprest

    RELOP     shift, and go to state 63
    BINOP_PM  shift, and go to state 64
    BINOP_MD  shift, and go to state 65
    B         shift, and go to state 72
    AND       shift, and go to state 66
    OR        shift, and go to state 67

    $default  reduce using rule 50 (exprest)

    exprest  go to state 73


State 47

   46 exp: STRING . exprest

    RELOP     shift, and go to state 63
    BINOP_PM  shift, and go to state 64
    BINOP_MD  shift, and go to state 65
    AND       shift, and go to state 66
    OR        shift, and go to state 67

    $default  reduce using rule 50 (exprest)

    exprest  go to state 74


State 48

   14 precondition: PRECOND LPAREN exp . RPAREN

    RPAREN  shift, and go to state 75


State 49

   31 simple_statement: RETURN SC .

    $default  reduce using rule 31 (simple_statement)


State 50

   32 simple_statement: RETURN exp . SC

    SC  shift, and go to state 76


State 51

   19 open_statement: IF LPAREN . exp RPAREN simple_statement
   20               | IF LPAREN . exp RPAREN open_statement
   21               | IF LPAREN . exp RPAREN closed_statement ELSE open_statement
   24 closed_statement: IF LPAREN . exp RPAREN closed_statement ELSE closed_statement

    NOT     shift, and go to state 41
    TRUE    shift, and go to state 42
    FALSE   shift, and go to state 43
    LPAREN  shift, and go to state 44
    ID      shift, and go to state 45
    NUM     shift, and go to state 46
    STRING  shift, and go to state 47

    exp  go to state 77


State 52

   22 open_statement: WHILE LPAREN . exp RPAREN open_statement
   25 closed_statement: WHILE LPAREN . exp RPAREN closed_statement

    NOT     shift, and go to state 41
    TRUE    shift, and go to state 42
    FALSE   shift, and go to state 43
    LPAREN  shift, and go to state 44
    ID      shift, and go to state 45
    NUM     shift, and go to state 46
    STRING  shift, and go to state 47

    exp  go to state 78


State 53

   33 simple_statement: BREAK SC .

    $default  reduce using rule 33 (simple_statement)


State 54

   34 simple_statement: CONTINUE SC .

    $default  reduce using rule 34 (simple_statement)


State 55

   16 statements: statements . statement
   26 simple_statement: LBRACE statements . RBRACE

    INT       shift, and go to state 2
    BYTE      shift, and go to state 3
    BOOL      shift, and go to state 4
    RETURN    shift, and go to state 27
    IF        shift, and go to state 28
    WHILE     shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    LBRACE    shift, and go to state 32
    RBRACE    shift, and go to state 79
    ID        shift, and go to state 33

    statement         go to state 59
    open_statement    go to state 36
    closed_statement  go to state 37
    simple_statement  go to state 38
    call              go to state 39
    type              go to state 40


State 56

   29 simple_statement: ID ASSIGN . exp SC

    NOT     shift, and go to state 41
    TRUE    shift, and go to state 42
    FALSE   shift, and go to state 43
    LPAREN  shift, and go to state 44
    ID      shift, and go to state 45
    NUM     shift, and go to state 46
    STRING  shift, and go to state 47

    exp  go to state 80


State 57

   35 call: ID LPAREN . explist RPAREN
   36     | ID LPAREN . RPAREN

    NOT     shift, and go to state 41
    TRUE    shift, and go to state 42
    FALSE   shift, and go to state 43
    LPAREN  shift, and go to state 44
    RPAREN  shift, and go to state 81
    ID      shift, and go to state 45
    NUM     shift, and go to state 46
    STRING  shift, and go to state 47

    explist  go to state 82
    exp      go to state 83


State 58

    4 funcdecl: retype ID LPAREN formals RPAREN preconditions LBRACE statements RBRACE .

    $default  reduce using rule 4 (funcdecl)


State 59

   16 statements: statements statement .

    $default  reduce using rule 16 (statements)


State 60

   30 simple_statement: call SC .

    $default  reduce using rule 30 (simple_statement)


State 61

   27 simple_statement: type ID . SC
   28                 | type ID . ASSIGN exp SC

    ASSIGN  shift, and go to state 84
    SC      shift, and go to state 85


State 62

   49 exp: NOT exp .

    $default  reduce using rule 49 (exp)


State 63

   55 exprest: RELOP . exp

    NOT     shift, and go to state 41
    TRUE    shift, and go to state 42
    FALSE   shift, and go to state 43
    LPAREN  shift, and go to state 44
    ID      shift, and go to state 45
    NUM     shift, and go to state 46
    STRING  shift, and go to state 47

    exp  go to state 86


State 64

   51 exprest: BINOP_PM . exp

    NOT     shift, and go to state 41
    TRUE    shift, and go to state 42
    FALSE   shift, and go to state 43
    LPAREN  shift, and go to state 44
    ID      shift, and go to state 45
    NUM     shift, and go to state 46
    STRING  shift, and go to state 47

    exp  go to state 87


State 65

   52 exprest: BINOP_MD . exp

    NOT     shift, and go to state 41
    TRUE    shift, and go to state 42
    FALSE   shift, and go to state 43
    LPAREN  shift, and go to state 44
    ID      shift, and go to state 45
    NUM     shift, and go to state 46
    STRING  shift, and go to state 47

    exp  go to state 88


State 66

   53 exprest: AND . exp

    NOT     shift, and go to state 41
    TRUE    shift, and go to state 42
    FALSE   shift, and go to state 43
    LPAREN  shift, and go to state 44
    ID      shift, and go to state 45
    NUM     shift, and go to state 46
    STRING  shift, and go to state 47

    exp  go to state 89


State 67

   54 exprest: OR . exp

    NOT     shift, and go to state 41
    TRUE    shift, and go to state 42
    FALSE   shift, and go to state 43
    LPAREN  shift, and go to state 44
    ID      shift, and go to state 45
    NUM     shift, and go to state 46
    STRING  shift, and go to state 47

    exp  go to state 90


State 68

   47 exp: TRUE exprest .

    $default  reduce using rule 47 (exp)


State 69

   48 exp: FALSE exprest .

    $default  reduce using rule 48 (exp)


State 70

   42 exp: LPAREN exp . RPAREN

    RPAREN  shift, and go to state 91


State 71

   43 exp: ID exprest .

    $default  reduce using rule 43 (exp)


State 72

   45 exp: NUM B . exprest

    RELOP     shift, and go to state 63
    BINOP_PM  shift, and go to state 64
    BINOP_MD  shift, and go to state 65
    AND       shift, and go to state 66
    OR        shift, and go to state 67

    $default  reduce using rule 50 (exprest)

    exprest  go to state 92


State 73

   44 exp: NUM exprest .

    $default  reduce using rule 44 (exp)


State 74

   46 exp: STRING exprest .

    $default  reduce using rule 46 (exp)


State 75

   14 precondition: PRECOND LPAREN exp RPAREN .

    $default  reduce using rule 14 (precondition)


State 76

   32 simple_statement: RETURN exp SC .

    $default  reduce using rule 32 (simple_statement)


State 77

   19 open_statement: IF LPAREN exp . RPAREN simple_statement
   20               | IF LPAREN exp . RPAREN open_statement
   21               | IF LPAREN exp . RPAREN closed_statement ELSE open_statement
   24 closed_statement: IF LPAREN exp . RPAREN closed_statement ELSE closed_statement

    RPAREN  shift, and go to state 93


State 78

   22 open_statement: WHILE LPAREN exp . RPAREN open_statement
   25 closed_statement: WHILE LPAREN exp . RPAREN closed_statement

    RPAREN  shift, and go to state 94


State 79

   26 simple_statement: LBRACE statements RBRACE .

    $default  reduce using rule 26 (simple_statement)


State 80

   29 simple_statement: ID ASSIGN exp . SC

    SC  shift, and go to state 95


State 81

   36 call: ID LPAREN RPAREN .

    $default  reduce using rule 36 (call)


State 82

   35 call: ID LPAREN explist . RPAREN

    RPAREN  shift, and go to state 96


State 83

   37 explist: exp .
   38        | exp . COMMA explist

    COMMA  shift, and go to state 97

    $default  reduce using rule 37 (explist)


State 84

   28 simple_statement: type ID ASSIGN . exp SC

    NOT     shift, and go to state 41
    TRUE    shift, and go to state 42
    FALSE   shift, and go to state 43
    LPAREN  shift, and go to state 44
    ID      shift, and go to state 45
    NUM     shift, and go to state 46
    STRING  shift, and go to state 47

    exp  go to state 98


State 85

   27 simple_statement: type ID SC .

    $default  reduce using rule 27 (simple_statement)


State 86

   55 exprest: RELOP exp .

    $default  reduce using rule 55 (exprest)


State 87

   51 exprest: BINOP_PM exp .

    $default  reduce using rule 51 (exprest)


State 88

   52 exprest: BINOP_MD exp .

    $default  reduce using rule 52 (exprest)


State 89

   53 exprest: AND exp .

    $default  reduce using rule 53 (exprest)


State 90

   54 exprest: OR exp .

    $default  reduce using rule 54 (exprest)


State 91

   42 exp: LPAREN exp RPAREN .

    $default  reduce using rule 42 (exp)


State 92

   45 exp: NUM B exprest .

    $default  reduce using rule 45 (exp)


State 93

   19 open_statement: IF LPAREN exp RPAREN . simple_statement
   20               | IF LPAREN exp RPAREN . open_statement
   21               | IF LPAREN exp RPAREN . closed_statement ELSE open_statement
   24 closed_statement: IF LPAREN exp RPAREN . closed_statement ELSE closed_statement

    INT       shift, and go to state 2
    BYTE      shift, and go to state 3
    BOOL      shift, and go to state 4
    RETURN    shift, and go to state 27
    IF        shift, and go to state 28
    WHILE     shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    LBRACE    shift, and go to state 32
    ID        shift, and go to state 33

    open_statement    go to state 99
    closed_statement  go to state 100
    simple_statement  go to state 101
    call              go to state 39
    type              go to state 40


State 94

   22 open_statement: WHILE LPAREN exp RPAREN . open_statement
   25 closed_statement: WHILE LPAREN exp RPAREN . closed_statement

    INT       shift, and go to state 2
    BYTE      shift, and go to state 3
    BOOL      shift, and go to state 4
    RETURN    shift, and go to state 27
    IF        shift, and go to state 28
    WHILE     shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    LBRACE    shift, and go to state 32
    ID        shift, and go to state 33

    open_statement    go to state 102
    closed_statement  go to state 103
    simple_statement  go to state 38
    call              go to state 39
    type              go to state 40


State 95

   29 simple_statement: ID ASSIGN exp SC .

    $default  reduce using rule 29 (simple_statement)


State 96

   35 call: ID LPAREN explist RPAREN .

    $default  reduce using rule 35 (call)


State 97

   38 explist: exp COMMA . explist

    NOT     shift, and go to state 41
    TRUE    shift, and go to state 42
    FALSE   shift, and go to state 43
    LPAREN  shift, and go to state 44
    ID      shift, and go to state 45
    NUM     shift, and go to state 46
    STRING  shift, and go to state 47

    explist  go to state 104
    exp      go to state 83


State 98

   28 simple_statement: type ID ASSIGN exp . SC

    SC  shift, and go to state 105


State 99

   20 open_statement: IF LPAREN exp RPAREN open_statement .

    $default  reduce using rule 20 (open_statement)


State 100

   21 open_statement: IF LPAREN exp RPAREN closed_statement . ELSE open_statement
   24 closed_statement: IF LPAREN exp RPAREN closed_statement . ELSE closed_statement

    ELSE  shift, and go to state 106


State 101

   19 open_statement: IF LPAREN exp RPAREN simple_statement .
   23 closed_statement: simple_statement .

    ELSE      reduce using rule 23 (closed_statement)
    $default  reduce using rule 19 (open_statement)


State 102

   22 open_statement: WHILE LPAREN exp RPAREN open_statement .

    $default  reduce using rule 22 (open_statement)


State 103

   25 closed_statement: WHILE LPAREN exp RPAREN closed_statement .

    $default  reduce using rule 25 (closed_statement)


State 104

   38 explist: exp COMMA explist .

    $default  reduce using rule 38 (explist)


State 105

   28 simple_statement: type ID ASSIGN exp SC .

    $default  reduce using rule 28 (simple_statement)


State 106

   21 open_statement: IF LPAREN exp RPAREN closed_statement ELSE . open_statement
   24 closed_statement: IF LPAREN exp RPAREN closed_statement ELSE . closed_statement

    INT       shift, and go to state 2
    BYTE      shift, and go to state 3
    BOOL      shift, and go to state 4
    RETURN    shift, and go to state 27
    IF        shift, and go to state 28
    WHILE     shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    LBRACE    shift, and go to state 32
    ID        shift, and go to state 33

    open_statement    go to state 107
    closed_statement  go to state 108
    simple_statement  go to state 38
    call              go to state 39
    type              go to state 40


State 107

   21 open_statement: IF LPAREN exp RPAREN closed_statement ELSE open_statement .

    $default  reduce using rule 21 (open_statement)


State 108

   24 closed_statement: IF LPAREN exp RPAREN closed_statement ELSE closed_statement .

    $default  reduce using rule 24 (closed_statement)
