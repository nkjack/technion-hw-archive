%{
	
	#include <iostream>
	#include <vector>
	#include "parser.hpp"
	using namespace std;

    vector<Table> tables;
    vector<int> offsets;

	#define YYDEBUG 1 
	#define YYSTYPE Node*
	int yylex();
	void yyerror(cons char*);
%}

%token ASSIGN
%left RELOP_EQ
%nonassoc RELOP
%left PLUS MINUS
%left MULT DIV

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token AND
%token OR
%token NOT
%token TRUE
%token FALSE
%token RETURN
%token IF
%token ELSE
%token WHILE
%token BREAK
%token CONTINUE
%token PRECOND
%token SC
%token COMMA
%token LPAREN RPAREN // left to right?
%token LBRACE RBRACE
%token ID
%token NUM
%token STRING
%token EF 

%%

program: M1 funcs
		{
			// check if main is in tables if not error
			tables.pop_back();
			offsets.pop_back();
		}
;
M1: /* epsilon */
	{
		Table* t = new Table();
		tables.push_back(t);
		offsets.push_back(0);
	}

funcs:	funcdecl funcs
		| /* epsilon */ 
;
funcdecl: retype ID LPAREN formals 
		{
			// initiate function
			// add function to symbol table in current scope
			// create new scope for function
			// add arguments to new scope
			vector<ArgsTypes> args;
			for (int i=0; i< $4->type.size() ; i++){
				if ($4->type[i] == "int")
					args.push_back(ArgsTypes.INT);
				else if ($4->type[i] == "bool")
					args.push_back(ArgsTypes.BOOL);
				else if ($4->type[i] == "byte")
					args.push_back(ArgsTypes.BYTE);
				else if ($4->type[i] == "String")
					args.push_back(ArgsTypes.STRING); // need to be cancel
			}
			tables.back()->insertFunction($2->value, offsets.back(),strToRetTypes($1->value), args);
			offsets.back() += 1;

			tables.push_back(new Table());
			offsets.push_back(offsets.back());

			for (int i=0; i<args.size(); i++){
				tables.back()->insertVariable($2->name[0], strToTypes($1->value), (i+1)*-1);
			}

		} 
		  RPAREN preconditions LBRACE statements RBRACE 
		{			
			// check if last statment in statements is return type which similar to retype
			
		}
;
retype: type {$$->type[0] = $1->value ;}
		| VOID { $$ = $1; }//$$->type[0] = 'void';}
		;
formals: formalslist {$$ = $1;}
		| /*epsilon*/ 
;
formalslist: formaldecl {
				$$->name.push_back($1->name[0]);
				$$->type.push_back($1->type[0]);
			}
			| formaldecl COMMA formalslist {
				$$->name.push_back($1->name[0]);
				$$->type.push_back($1->type[0]);
				for (int i=0; i < $2->names.size(); ++i){
					$$->name.push_back($3->name[i]);
					$$->type.push_back($3->type[i]);
				}
			}
;
formaldecl: type ID 
			{
				$$->name[0] = $2->name;
				$$->type[0] = $1->value;
			}
;
preconditions: preconditions precondition
				| /*epsilon*/
;
precondition: PRECOND LPAREN exp RPAREN {
				checkIfExpIsBool($3, yylineno);
			}
;
statements: statement
			| statements statement
			;

statement: open_statement
		| closed_statement
;
open_statement: IF LPAREN exp {checkIfExpIsBool($3, yylineno)} RPAREN simple_statement 
				| IF LPAREN exp {checkIfExpIsBool($3, yylineno)} RPAREN open_statement
				| IF LPAREN exp {checkIfExpIsBool($3, yylineno)} RPAREN closed_statement ELSE open_statement 
				| WHILE LPAREN exp {checkIfExpIsBool($3, yylineno)} RPAREN open_statement 
;
closed_statement: simple_statement
				| IF LPAREN exp {checkIfExpIsBool($3,yylineno)} RPAREN closed_statement ELSE closed_statement 
				| WHILE LPAREN exp {checkIfExpIsBool($3,yylineno)} RPAREN closed_statement 
;
simple_statement: N LBRACE statements RBRACE {
					tables.pop_back();
					offsets.pop_back();
				}
				| type ID SC {
					// check if ID is not already exists
					bool found = false;
					for (int i=0; tables.size(); ++i){
						if (tables[i].contains($2->name[0])){
							found=true;
							errorDef(yylineno, $2->name[0]);
							exit(1);
						}
					}
					// initiate ID in symbol table with type
					tables.back()->insertVariable($2->name[0], strToTypes($1->value), offsets->back());
					offsets->back() += 1;

				}
				| type ID ASSIGN exp SC {
					// check if ID is not already exists
					bool found = false;
					for (int i=0; tables.size(); ++i){
						if (tables[i].contains($2->name[0])){
							found=true;
							errorDef(yylineno, $2->name[0]);
							exit(1);
						}
					}
					// exp should have the same type unless it is byte to int
					if ($4->type[0] != $1->value){
						if ($4->type[0] == 'byte' && $1->value == 'int'){
							tables.back()->insertVariable($2->name[0], strToTypes($1->value), offsets->back());
							offsets->back() += 1;
						}
						else{
							errorMismatch(yylineno);
							exit(1);
						}
					}
					else{
						tables.back()->insertVariable($2->name[0], strToTypes($1->value), offsets->back());
						offsets->back() += 1;
					}

					// for byte exp  must be < 256 // embedded in exp
				}
				| ID ASSIGN exp SC {
					// check if ID is exists
					bool found = false;
					for (int i=0; tables.size(); ++i){
						if (tables[i].contains($2->name[0])){
							found=true;
							break;
						}
					}
					if (found == false){
						errorDef(yylineno, $2->name[0]);
						exit(1);
					}
					// check id ID.type is equal to exp.type
					if ($1->type[0] != $3->type[0] && ($1->type[0] == 'int' && $3->type[0] =='byte')){
						errorMismatch(yylineno);
						exit(1);	
					}
				}
				| call SC {
					// something to do here?
				}
				| RETURN SC {
					// only for functions with VOID or else Mismatch

				}
				| RETURN exp SC{
					// only for functions not in void or else Mismatch
				}
				| BREAK SC {
					// check if inside a while or forloop
					// else UnexpectedBreak;
				}
				| CONTINUE SC {
					// check if inside a while or forloop
					// else UnexpectedContinue;
				}
;
N: /* epsilon */
	{
		tables.push_back(new Table());
		offsets.push_back(offsets.back());
	}

;

call: ID LPAREN explist RPAREN
	{
		//TODO - maybe part of it need to be as marker
		// call type is from Id type
		// explist must fit the function from symbol table
		bool found = false;
		RetType rettype;
		std::vector<ArgsTypes> args;

		for (int i=0; i < tables.size(); i++){
			for (int j=0; j < tables[i].entries.size(); j++){
				if ((tables[i].entries[j]->entry_type == EntryType.FUNCTION)&&
					(tables[i].entries[j]->name == $1->value)){

					found = true;
					rettype = tables[i].entries[j]->ret_type;
					args = tables[i].entries[j]->args_types;
					break;
				}
			}
		}

		if (found == false){
			errorUndefFunc(yylineno, $1->name);
			exit(1);
		}

		std::vector<string> v_args;
		for (int j=0; j<args.size(); j++){
			v_args->push_back(argToStr(args[j]))
		}
		//check all arguments
		if ($3->type.size() != args.size()){
			// error
			errorPrototypeMismatch(yylineno, $1->value, v_args);
			exit(1);
		}
		for (int i=0; i< $3->type.size(); i++){
			if (args[i] != strToArgTypes($3->type[i])){
				errorPrototypeMismatch(yylineno, $1->value, v_args);
				exit(1);
			}
		}
	}
	| ID LPAREN RPAREN
	{
		// call type is from Id type
		// empty explist must fit the function from symbol table
		bool found = false;
		RetType rettype;
		std::vector<ArgsTypes> args;

		for (int i=0; i < tables.size(); i++){
			for (int j=0; j < tables[i].entries.size(); j++){
				if ((tables[i].entries[j]->entry_type == EntryType.FUNCTION)&&
					(tables[i].entries[j]->name == $1->value)){

					found = true;
					rettype = tables[i].entries[j]->ret_type;
					args = tables[i].entries[j]->args_types;
					break;
				}
			}
		}

		if (found == false){
			errorUndefFunc(yylineno, $1->name);
			exit(1);
		}

		std::vector<string> v_args;
		for (int j=0; j<args.size(); j++){
			v_args->push_back(argToStr(args[j]))
		}
		//check all arguments
		if (args.size() != 0){
			// error
			errorPrototypeMismatch(yylineno, $1->value, v_args);
			exit(1);
		}

	}

;
explist: exp
		| exp COMMA explist // concatenating explist
;
type: INT {$$ = $1;}//{$$.value = "int";}
	| BYTE {$$ = $1;}//{$$.value = "byte";} //cannot represent value > 255
	| BOOL {$$ = $1;}//{$$.value = "bool";} 
;

exp: LPAREN exp RPAREN { $$ = $2 ;}
	| ID  { 
		$$ = $1 ; 
		// need to check if ID is usable?
	}
	| NUM exprest {
		// can be relop here , need to check exprest is relop num, exp is bool
		// if binop than type of exp is NUM because better range
		if ($2->type[0] == "RelopRest"){
			$$ = new Relop($1, $2);
		}
		else if ($2->type[0] == "BinOpRest"){
			$$ = new BinOp($1, $2);
		}
		else if ($2->type[0] == "Epsilon"){
			$$ = $1;
		}
		else{
			// error
		}
	}
	| NUM B exprest {
			// if binop than type of exp is exprest type because better range
		if ($2->type[0] == "RelopRest"){
			Node* n_byte = new NumByte($1->value);
			$$ = new Relop(n_byte, $3);
		}
		else if ($2->type[0] == "BinOpRest"){
			Node* n_byte = new NumByte($1->value);
			$$ = new BinOp(n_byte, $3);
		}
		else if ($3->type[0] == "Epsilon"){
			$$ = new NumByte($1->value);
		}
		else{
			// error
		}

			//	but has to be NUM or NUM B
		}
	| STRING { $$ = $1;}  // only for print call
	| TRUE exprest {
			if ($2->type[0] == 'Epsilon')
				$$ = $1;
			else if ($2->type[0] == 'BoolOpRest' && $2->name[0] == "And") {
				$$->type[0] = 'bool';
				$$->bool_val = $2->bool_val;
			}
			else if ($2->type[0] == 'BoolOpRest' && $2->name[0] == "Or")
				$$= $1;
			else{
				errorMismatch(yylineno);
				exit(1);
			}
		}
	| FALSE exprest { 
		if ($2->type[0] == 'Epsilon')
			$$ = $1;
		else if ($2->type[0] == 'BoolOpRest' && $2->name[0] == "And")
			$$ = $1;
		else if ($2->type[0] == 'BoolOpRest' && $2->name[0] == "Or"){
			$$->bool_val = $2->bool_val;
			$$->type = 'bool';
		}
		else{
			//TODO raise error
			errorMismatch(yylineno);
			exit(1);
		}
	| NOT exp {$$ = new Not($2)}
;
exprest: /* epsilon */ {$$ = new Epsilon();}
		| PLUS exp {$$ = new BinOpRest($2, "Plus");}
		| MINUS exp {$$ = new BinOpRest($2, "Minus");}
		| MULT exp {$$ = new BinOpRest($2, "Mult");}
		| DIV exp {$$ = new BinOpRest($2, "Div");}
		| AND exp {$$ = new BoolOpRest($2, "And");}
		| OR exp {$$ = new BoolOpRest($2, "Or");}
		| RELOP exp {$$ = new RelopRest($1, $2);} // operands need to be type NUM
		| RELOP_EQ exp {$$ = new RelopRest($1, $2);} // operands need to be type NUM

;

%%

void yyerror(const char*) {
	cout << "syntax error" << endl;
}

int main(){
	yydebug = 1; 
	return yyparse();
}

#ifndef __PARSER_H
#define __PARSER_H

#include <stdio.h>
#include <string.h>
#include <vector>
#include <string>
#include <iostream>
#include <math.h>

using namespace std;
extern int yylineno; 

class Node{

    public:
        std::vector<string> type;
        std::vector<string> name;

        string value;
        int value_t;
        bool value_b;

};


// noam

class RetType : Node{
	RetType(char* yytext) : value(yytext) {
		this->type[0] == this->value;
		this->name[0] == "RetType";
	}
}
class Type : Node {
	Type(char* yytext) : value(yytext){
		this->type[0] == this->value;
		this->name[0] == "Type";
	}
}

// class BoolOp : Node {
// 	BoolOp(char* yytext) : value(yytext), type("BoolOp"){
// }

class Bool : Node {
	Bool(char* yytext, bool token_val) : value(yytext),value_b(token_val){
		this->type[0] == "bool";
	}
}

class Rel : Node {
	Rel(char* yytext) : value(yytext){
		this->name[0] == "Rel";
	}
}

class Id : Node {
	Id(char* yytext) : value(yytext) {
		this->name[0] == "Id";
	}
}

class String : Node {
	String(char* yytext) : value(yytext){
		this->type[0] == "string";
		this->name[0] == "String";
	}
}

class Num : Node{
    Num(char* yytext) : value_t(atoi(yytext)), value(yytext) {
    	this->type[0] == "int";
    	this->name[0] == "Num";
    }
};

class NumByte : Node {
	Num(string yytext) : value_t(atoi(yytext)),value(yytext) {
		this->type[0] == "byte";
		this->name[0] == "NumByte";
		if {value_t > 255} {
			errorByteTooLarge(yylineno, value);
			exit(1);
		}
	}
}

class Epsilon : Node {
	Epsilon() : type("epsilon"){
		this->name[0] == "epsilon";	
	}
}

// class Exp : Node {
// 	Exp(Node* n, ){

// 	}
// }

class BinOp : Node {
	BinOp(Node* n_num, Node* b_binrest){
		if (n_num->type[0] == "int" || b_binrest->type[0] == "int") {
			this->type = "int";
		}
		else {
			this->type[0] = "byte";
		}

		if (b_binrest->name[0] == "Plus"){
			this->value_t =  b_binrest->value_t + n_num->value_t;
			// this->value = str(this->value_t) need?
		}
		else if (b_binrest->name[0] == "Minus"){
			this->value_t =  b_binrest->value_t - n_num->value_t;
			// this->value = str(this->value_t) need?
		}
		else if (b_binrest->name[0] == "Mult"){
			this->value_t =  b_binrest->value_t * n_num->value_t;
			// this->value = str(this->value_t) need?
			if ((this->type[0] == "byte") && (this->value_t > 255)){
				errorByteTooLarge(yylineno, value);
				exit(1);
			}
		}
		else if (b_binrest->name[0] == "Div"){
			this->value_t = n_num->value_t / b_binrest->value_t ;
			// this->value = str(this->value_t) need?
		}

	}
}

class BinOpRest : Node {
	BinOpRest(Node* n, string op):{
		if (n->type[0] == "int" || n->type[0] == "byte") {
			this->type[0] = n->type[0];
			this->value = n->value;
			this->value_t = n->value_t;
			this->name[0] = op;
		}
		else{
			errorMismatch(yylineno);
			exit(1);
		}
	}
}

class BoolOPRest : Node {
	BoolOPRest(Node* n, string op):{
		if (n->type[0] == "bool") {
			this->type[0] = "BoolOpRest";
			this->value = n->value;
			this->value_b = n->value_b;
			this->name[0] = op;
		}
		else{
			errorMismatch(yylineno);
			exit(1);
		}
	}
}
class Relop : Node {
	Relop(Node* n_num, Node* n_relrest){
		this->type[0] = "bool";
		if (n_relrest->name[0] == "<"){
			if (n_num->value_t < n_relrest->value_t){
				this->value_b = true;
				this->value = "true";
			}
			else{
				this->value_b = false;
				this->value = "false";	
			}
		}
		else if (n_relrest->name[0] == ">"){
			if (n_num->value_t > n_relrest->value_t){
				this->value_b = true;
				this->value = "true";
			}
			else{
				this->value_b = false;
				this->value = "false";	
			}
		}
		else if (n_relrest->name[0] == "<="){
			if (n_num->value_t <= n_relrest->value_t){
				this->value_b = true;
				this->value = "true";
			}
			else{
				this->value_b = false;
				this->value = "false";	
			}	
		}
		else if (n_relrest->name[0] == ">="){
			if (n_num->value_t >= n_relrest->value_t){
				this->value_b = true;
				this->value = "true";
			}
			else{
				this->value_b = false;
				this->value = "false";	
			}
		}
		else if (n_relrest->name[0] == "=="){
			if (n_num->value_t == n_relrest->value_t){
				this->value_b = true;
				this->value = "true";
			}
			else{
				this->value_b = false;
				this->value = "false";	
			}
		}
		else if (n_relrest->name[0] == "!="){
			if (n_num->value_t != n_relrest->value_t){
				this->value_b = true;
				this->value = "true";
			}
			else{
				this->value_b = false;
				this->value = "false";	
			}
		}
		else {
			//somthing wrong should not get here
		}
	}
}


class RelopRest : Node {
	RelopRest(Node* n_rel, Node* n_num):{
		if (n_num->type[0] == "int" || n_num->type[0] == "byte")  {
			// this->type = n_num->type;
			this->type[0] = "RelopRest";
			this->value = n_num->value;
			this->value_t = n_num->value_t;
			this->name[0] = n_rel->value;
		}
		else{
			errorMismatch(yylineno);
			exit(1);
		}
	}
}

class Not : Node {
	Not(Node* n){
		if (n->type[0] != "bool"){
			errorMismatch(yylineno);
			exit(1);
		}
		else{
			this->value_b =  !n->value_b;
			// this->value = n->value;
			this->type[0] = "bool";
		}
	}
}

/*
class Num : Node{
    Num(char* yytext) : val(atoi(yytext)), type("int") {}
};

class String : Node{
    String(char* yytext) : val_str(yytext), type("str") {}
};




class program: Node {

};
class funcs: Node {

};
class funcdecl:Node {

};
class retype: Node {

};
class formals: Node {

};
class formalslist:Node {

};
class formaldecl:Node {

};
class preconditions:    Node{

};
class precondition: Node {

};
class statements: Node {

};
class statement: Node {

};
class open_statement: Node {

};
class closed_statement:Node {

};
class simple_statement: Node {

};
class call:Node {

};
class explist: Node {

};
class type: Node{

};
class exp: Node{

};
*/


#define YYSTYPE Node*

#endif

#ifndef _SYMBOLTABLE_
#define _SYMBOLTABLE_

#include <vector>
#include <string>
#include <algorithm>

using namespace std;

// functions to implement
// Maketable(parent) - create a new table which is a son of a parent in the tree
// insert(table, name, type, offset) - insert variable to symbol table
// push, pop, top


enum EntryType { VARIABLE, FUNCTION };
enum Types {INT, BYTE, BOOL, STRING};
enum RetTypes { INT, BYTE, BOOL, STRING, VOID };
enum ArgsTypes { INT, BYTE, BOOL, STRING};

Types strToTypes(string s){
    if s == "int"
        return Types.INT;
    else if s == "byte"
        return Types.BYTE;
    else if s == "bool"
        return Types.BOOL;
    else if s == "string"
        return Types.STRING;
    else{
        // error

    }
}

RetTypes strToRetTypes(string s){
    if s == "int"
        return RetTypes.INT;
    else if s == "byte"
        return RetTypes.BYTE;
    else if s == "bool"
        return RetTypes.BOOL;
    else if s == "String"
        return RetTypes.STRING;
    else if s == "void"
        return RetTypes.VOID;
    else{
        // error
        
    }
}

ArgsTypes strToArgTypes(string s){
    if s == "int"
        return ArgsTypes.INT;
    else if s == "byte"
        return ArgsTypes.BYTE;
    else if s == "bool"
        return ArgsTypes.BOOL;
    else if s == "String"
        return ArgsTypes.STRING;
    else{
        // error 
    }
}

string argToStr(ArgsTypes arg){
    if arg == ArgsTypes.INT
        return "int";
    else if arg == ArgsTypes.BYTE
        return "byte"
    else if arg == ArgsTypes.BOOL
        return "bool"
    else if arg == ArgsTypes.STRING
        return "string"
    else {
        // error
    }
       
}

class Table {
    public:
        vector<TableEntry*> entries;

        Table(){}

        void insertVariable(string name, Types type, int offset) {
            this->entries.push_back(new TableEntry(name, 
                                                    EntryType.VARIABLE,
                                                    offset,
                                                    type))
        }
        void insertFunction(string name, int offset, RetTypes ret_type, vector<ArgsTypes> arguments){
            this->entries.push_back(new TableEntry(name,
                                                    EntryType.FUNCTION,
                                                    offset,
                                                    ret_type,
                                                    arguments));
        }

        bool contains(string name){
            if(std::find(entries.begin(), entries.end(), name) != entries.end()) {
                return true;
            }
            return false;
        }
}


class TableEntry {
    public:
        string name;
        EntryType entry_type;
        int offset;

        Types type; // for VARIABLE
        
        RetTypes ret_type; // for function
        vector<ArgsTypes> args_types; // for function

        // for variable
        TableEntry(string name, EntryType entry_type, int offset, Types type) : 
        name(name), entry_type(entry_type), offset(offset), type(type) {}

        // for function      
        TableEntry(string name, EntryType entry_type, int offset, RetTypes ret_type, 
            vector<ArgsTypes> arguments) : 
        name(name), entry_type(entry_type), offset(offset), ret_type(ret_type), 
        args_types(arguments) {}        

}



// functions to implement
// Maketable(parent) - create a new table which is a son of a parent in the tree
// insert(table, name, type, offset) - insert variable to symbol table
// push, pop, top

// push - with vector is v.push_back(variable)
// pop - with vecor is v.pop_back()
// top - with vector is v.back()

//maketable is basically push_back()

void insertVariable(Table* table, string name, Type type, int offset){
    table->insertVariable(name, type, offset);
}

void insertFunction(Table* table, string name, RetTypes ret_type, vector<ArgsTypes> args ,int offset){
    table->insertVariable(name, offset, offset, ret_type, args);
}


/*
class SymbolTableEntry{
    
    public:
        string name;
        string type;
        string value;
        int offset;
    
        SymbolTableEntry(string name, string type, int offset, string value) : name(name), type(type), offset(offset), 
                        value(value){}
    
        //void setValue(string value)

};

class SymbolTable{
    public:
        vector<SymbolTableEntry> table;
        
        void insertEntry(string name, string type, int offset, string value){
            SymbolTableEntry entry(name, type, offset, value);
            this->table.push_back(entry);
        }

};


class FunctionTableEntry{
    
    public:
        string name;
        string retType;
        vector<string> argsTypes;

        FunctionTableEntry(string name, string retType) : name(name), retType(retType){}

        void insertArg(string argType){
            this->argsTypes.push_back(argType);
        }
        
};


class FunctionTable{
public:
    vector<FunctionTableEntry> table;

    void insertEntry(string name, string retType, vector<string> argsTypes){
        FunctionTableEntry entry(name, retType);
        for(int i=0; i<argsTypes.size(); i++){
            entry.insertArg(argsTypes[i]);
        }

        this->table.push_back(entry);
    }
};
*/

#endif






















