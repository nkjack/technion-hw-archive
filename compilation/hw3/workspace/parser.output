Terminals unused in grammar

   B
   TRUE
   FALSE
   STRING
   AND
   OR
   RELOP_EQ
   RELOP
   PLUS
   MINUS
   MULT
   DIV
   NOT


State 35 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: M1 funcs

    2 M1: %empty

    3 funcs: funcdecl funcs
    4      | %empty

    5 $@1: %empty

    6 funcdecl: retype ID LPAREN formals $@1 RPAREN preconditions LBRACE statements RBRACE

    7 retype: type
    8       | VOID

    9 formals: formalslist
   10        | %empty

   11 formalslist: formaldecl
   12            | formaldecl COMMA formalslist

   13 formaldecl: type ID

   14 preconditions: preconditions precondition
   15              | %empty

   16 precondition: PRECOND LPAREN exp RPAREN

   17 statements: statement
   18           | statements statement

   19 statement: N LBRACE statements RBRACE
   20          | type ID SC
   21          | type ID ASSIGN exp SC
   22          | ID ASSIGN exp SC
   23          | call SC
   24          | RETURN SC
   25          | RETURN exp SC
   26          | BREAK SC
   27          | CONTINUE SC
   28          | IF_SCOPE
   29          | IF_SCOPE ELSE_SCOPE
   30          | WHILE_SCOPE

   31 $@2: %empty

   32 IF_SCOPE: M_IF_SCOPE IF LPAREN exp $@2 RPAREN statement

   33 M_IF_SCOPE: %empty

   34 $@3: %empty

   35 WHILE_SCOPE: M_WHILE_SCOPE WHILE LPAREN exp $@3 RPAREN statement

   36 M_WHILE_SCOPE: %empty

   37 ELSE_SCOPE: ELSE M_ELSE_SCOPE statement

   38 M_ELSE_SCOPE: %empty

   39 N: %empty

   40 call: ID LPAREN explist RPAREN
   41     | ID LPAREN RPAREN

   42 explist: exp
   43        | exp COMMA explist

   44 type: INT
   45     | BYTE
   46     | BOOL

   47 exp: NUM


Terminals, with rules where they appear

$end (0) 0
error (256)
VOID (258) 8
INT (259) 44
BYTE (260) 45
B (261)
BOOL (262) 46
TRUE (263)
FALSE (264)
RETURN (265) 24 25
ELSE (266) 37
IF (267) 32
WHILE (268) 35
BREAK (269) 26
CONTINUE (270) 27
PRECOND (271) 16
SC (272) 20 21 22 23 24 25 26 27
COMMA (273) 12 43
LBRACE (274) 6 19
RBRACE (275) 6 19
ID (276) 6 13 20 21 22 40 41
NUM (277) 47
STRING (278)
AND (279)
OR (280)
ASSIGN (281) 21 22
RELOP_EQ (282)
RELOP (283)
PLUS (284)
MINUS (285)
MULT (286)
DIV (287)
NOT (288)
LPAREN (289) 6 16 32 35 40 41
RPAREN (290) 6 16 32 35 40 41


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
program (37)
    on left: 1, on right: 0
M1 (38)
    on left: 2, on right: 1
funcs (39)
    on left: 3 4, on right: 1 3
funcdecl (40)
    on left: 6, on right: 3
$@1 (41)
    on left: 5, on right: 6
retype (42)
    on left: 7 8, on right: 6
formals (43)
    on left: 9 10, on right: 6
formalslist (44)
    on left: 11 12, on right: 9 12
formaldecl (45)
    on left: 13, on right: 11 12
preconditions (46)
    on left: 14 15, on right: 6 14
precondition (47)
    on left: 16, on right: 14
statements (48)
    on left: 17 18, on right: 6 18 19
statement (49)
    on left: 19 20 21 22 23 24 25 26 27 28 29 30, on right: 17 18 32
    35 37
IF_SCOPE (50)
    on left: 32, on right: 28 29
$@2 (51)
    on left: 31, on right: 32
M_IF_SCOPE (52)
    on left: 33, on right: 32
WHILE_SCOPE (53)
    on left: 35, on right: 30
$@3 (54)
    on left: 34, on right: 35
M_WHILE_SCOPE (55)
    on left: 36, on right: 35
ELSE_SCOPE (56)
    on left: 37, on right: 29
M_ELSE_SCOPE (57)
    on left: 38, on right: 37
N (58)
    on left: 39, on right: 19
call (59)
    on left: 40 41, on right: 23
explist (60)
    on left: 42 43, on right: 40 43
type (61)
    on left: 44 45 46, on right: 7 13 20 21
exp (62)
    on left: 47, on right: 16 21 22 25 32 35 42 43


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (M1)

    program  go to state 1
    M1       go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: M1 . funcs

    VOID  shift, and go to state 4
    INT   shift, and go to state 5
    BYTE  shift, and go to state 6
    BOOL  shift, and go to state 7

    $default  reduce using rule 4 (funcs)

    funcs     go to state 8
    funcdecl  go to state 9
    retype    go to state 10
    type      go to state 11


State 3

    0 $accept: program $end .

    $default  accept


State 4

    8 retype: VOID .

    $default  reduce using rule 8 (retype)


State 5

   44 type: INT .

    $default  reduce using rule 44 (type)


State 6

   45 type: BYTE .

    $default  reduce using rule 45 (type)


State 7

   46 type: BOOL .

    $default  reduce using rule 46 (type)


State 8

    1 program: M1 funcs .

    $default  reduce using rule 1 (program)


State 9

    3 funcs: funcdecl . funcs

    VOID  shift, and go to state 4
    INT   shift, and go to state 5
    BYTE  shift, and go to state 6
    BOOL  shift, and go to state 7

    $default  reduce using rule 4 (funcs)

    funcs     go to state 12
    funcdecl  go to state 9
    retype    go to state 10
    type      go to state 11


State 10

    6 funcdecl: retype . ID LPAREN formals $@1 RPAREN preconditions LBRACE statements RBRACE

    ID  shift, and go to state 13


State 11

    7 retype: type .

    $default  reduce using rule 7 (retype)


State 12

    3 funcs: funcdecl funcs .

    $default  reduce using rule 3 (funcs)


State 13

    6 funcdecl: retype ID . LPAREN formals $@1 RPAREN preconditions LBRACE statements RBRACE

    LPAREN  shift, and go to state 14


State 14

    6 funcdecl: retype ID LPAREN . formals $@1 RPAREN preconditions LBRACE statements RBRACE

    INT   shift, and go to state 5
    BYTE  shift, and go to state 6
    BOOL  shift, and go to state 7

    $default  reduce using rule 10 (formals)

    formals      go to state 15
    formalslist  go to state 16
    formaldecl   go to state 17
    type         go to state 18


State 15

    6 funcdecl: retype ID LPAREN formals . $@1 RPAREN preconditions LBRACE statements RBRACE

    $default  reduce using rule 5 ($@1)

    $@1  go to state 19


State 16

    9 formals: formalslist .

    $default  reduce using rule 9 (formals)


State 17

   11 formalslist: formaldecl .
   12            | formaldecl . COMMA formalslist

    COMMA  shift, and go to state 20

    $default  reduce using rule 11 (formalslist)


State 18

   13 formaldecl: type . ID

    ID  shift, and go to state 21


State 19

    6 funcdecl: retype ID LPAREN formals $@1 . RPAREN preconditions LBRACE statements RBRACE

    RPAREN  shift, and go to state 22


State 20

   12 formalslist: formaldecl COMMA . formalslist

    INT   shift, and go to state 5
    BYTE  shift, and go to state 6
    BOOL  shift, and go to state 7

    formalslist  go to state 23
    formaldecl   go to state 17
    type         go to state 18


State 21

   13 formaldecl: type ID .

    $default  reduce using rule 13 (formaldecl)


State 22

    6 funcdecl: retype ID LPAREN formals $@1 RPAREN . preconditions LBRACE statements RBRACE

    $default  reduce using rule 15 (preconditions)

    preconditions  go to state 24


State 23

   12 formalslist: formaldecl COMMA formalslist .

    $default  reduce using rule 12 (formalslist)


State 24

    6 funcdecl: retype ID LPAREN formals $@1 RPAREN preconditions . LBRACE statements RBRACE
   14 preconditions: preconditions . precondition

    PRECOND  shift, and go to state 25
    LBRACE   shift, and go to state 26

    precondition  go to state 27


State 25

   16 precondition: PRECOND . LPAREN exp RPAREN

    LPAREN  shift, and go to state 28


State 26

    6 funcdecl: retype ID LPAREN formals $@1 RPAREN preconditions LBRACE . statements RBRACE

    INT       shift, and go to state 5
    BYTE      shift, and go to state 6
    BOOL      shift, and go to state 7
    RETURN    shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    ID        shift, and go to state 32

    WHILE     reduce using rule 36 (M_WHILE_SCOPE)
    LBRACE    reduce using rule 39 (N)
    $default  reduce using rule 33 (M_IF_SCOPE)

    statements     go to state 33
    statement      go to state 34
    IF_SCOPE       go to state 35
    M_IF_SCOPE     go to state 36
    WHILE_SCOPE    go to state 37
    M_WHILE_SCOPE  go to state 38
    N              go to state 39
    call           go to state 40
    type           go to state 41


State 27

   14 preconditions: preconditions precondition .

    $default  reduce using rule 14 (preconditions)


State 28

   16 precondition: PRECOND LPAREN . exp RPAREN

    NUM  shift, and go to state 42

    exp  go to state 43


State 29

   24 statement: RETURN . SC
   25          | RETURN . exp SC

    SC   shift, and go to state 44
    NUM  shift, and go to state 42

    exp  go to state 45


State 30

   26 statement: BREAK . SC

    SC  shift, and go to state 46


State 31

   27 statement: CONTINUE . SC

    SC  shift, and go to state 47


State 32

   22 statement: ID . ASSIGN exp SC
   40 call: ID . LPAREN explist RPAREN
   41     | ID . LPAREN RPAREN

    ASSIGN  shift, and go to state 48
    LPAREN  shift, and go to state 49


State 33

    6 funcdecl: retype ID LPAREN formals $@1 RPAREN preconditions LBRACE statements . RBRACE
   18 statements: statements . statement

    INT       shift, and go to state 5
    BYTE      shift, and go to state 6
    BOOL      shift, and go to state 7
    RETURN    shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    RBRACE    shift, and go to state 50
    ID        shift, and go to state 32

    WHILE     reduce using rule 36 (M_WHILE_SCOPE)
    LBRACE    reduce using rule 39 (N)
    $default  reduce using rule 33 (M_IF_SCOPE)

    statement      go to state 51
    IF_SCOPE       go to state 35
    M_IF_SCOPE     go to state 36
    WHILE_SCOPE    go to state 37
    M_WHILE_SCOPE  go to state 38
    N              go to state 39
    call           go to state 40
    type           go to state 41


State 34

   17 statements: statement .

    $default  reduce using rule 17 (statements)


State 35

   28 statement: IF_SCOPE .
   29          | IF_SCOPE . ELSE_SCOPE

    ELSE  shift, and go to state 52

    ELSE      [reduce using rule 28 (statement)]
    $default  reduce using rule 28 (statement)

    ELSE_SCOPE  go to state 53


State 36

   32 IF_SCOPE: M_IF_SCOPE . IF LPAREN exp $@2 RPAREN statement

    IF  shift, and go to state 54


State 37

   30 statement: WHILE_SCOPE .

    $default  reduce using rule 30 (statement)


State 38

   35 WHILE_SCOPE: M_WHILE_SCOPE . WHILE LPAREN exp $@3 RPAREN statement

    WHILE  shift, and go to state 55


State 39

   19 statement: N . LBRACE statements RBRACE

    LBRACE  shift, and go to state 56


State 40

   23 statement: call . SC

    SC  shift, and go to state 57


State 41

   20 statement: type . ID SC
   21          | type . ID ASSIGN exp SC

    ID  shift, and go to state 58


State 42

   47 exp: NUM .

    $default  reduce using rule 47 (exp)


State 43

   16 precondition: PRECOND LPAREN exp . RPAREN

    RPAREN  shift, and go to state 59


State 44

   24 statement: RETURN SC .

    $default  reduce using rule 24 (statement)


State 45

   25 statement: RETURN exp . SC

    SC  shift, and go to state 60


State 46

   26 statement: BREAK SC .

    $default  reduce using rule 26 (statement)


State 47

   27 statement: CONTINUE SC .

    $default  reduce using rule 27 (statement)


State 48

   22 statement: ID ASSIGN . exp SC

    NUM  shift, and go to state 42

    exp  go to state 61


State 49

   40 call: ID LPAREN . explist RPAREN
   41     | ID LPAREN . RPAREN

    NUM     shift, and go to state 42
    RPAREN  shift, and go to state 62

    explist  go to state 63
    exp      go to state 64


State 50

    6 funcdecl: retype ID LPAREN formals $@1 RPAREN preconditions LBRACE statements RBRACE .

    $default  reduce using rule 6 (funcdecl)


State 51

   18 statements: statements statement .

    $default  reduce using rule 18 (statements)


State 52

   37 ELSE_SCOPE: ELSE . M_ELSE_SCOPE statement

    $default  reduce using rule 38 (M_ELSE_SCOPE)

    M_ELSE_SCOPE  go to state 65


State 53

   29 statement: IF_SCOPE ELSE_SCOPE .

    $default  reduce using rule 29 (statement)


State 54

   32 IF_SCOPE: M_IF_SCOPE IF . LPAREN exp $@2 RPAREN statement

    LPAREN  shift, and go to state 66


State 55

   35 WHILE_SCOPE: M_WHILE_SCOPE WHILE . LPAREN exp $@3 RPAREN statement

    LPAREN  shift, and go to state 67


State 56

   19 statement: N LBRACE . statements RBRACE

    INT       shift, and go to state 5
    BYTE      shift, and go to state 6
    BOOL      shift, and go to state 7
    RETURN    shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    ID        shift, and go to state 32

    WHILE     reduce using rule 36 (M_WHILE_SCOPE)
    LBRACE    reduce using rule 39 (N)
    $default  reduce using rule 33 (M_IF_SCOPE)

    statements     go to state 68
    statement      go to state 34
    IF_SCOPE       go to state 35
    M_IF_SCOPE     go to state 36
    WHILE_SCOPE    go to state 37
    M_WHILE_SCOPE  go to state 38
    N              go to state 39
    call           go to state 40
    type           go to state 41


State 57

   23 statement: call SC .

    $default  reduce using rule 23 (statement)


State 58

   20 statement: type ID . SC
   21          | type ID . ASSIGN exp SC

    SC      shift, and go to state 69
    ASSIGN  shift, and go to state 70


State 59

   16 precondition: PRECOND LPAREN exp RPAREN .

    $default  reduce using rule 16 (precondition)


State 60

   25 statement: RETURN exp SC .

    $default  reduce using rule 25 (statement)


State 61

   22 statement: ID ASSIGN exp . SC

    SC  shift, and go to state 71


State 62

   41 call: ID LPAREN RPAREN .

    $default  reduce using rule 41 (call)


State 63

   40 call: ID LPAREN explist . RPAREN

    RPAREN  shift, and go to state 72


State 64

   42 explist: exp .
   43        | exp . COMMA explist

    COMMA  shift, and go to state 73

    $default  reduce using rule 42 (explist)


State 65

   37 ELSE_SCOPE: ELSE M_ELSE_SCOPE . statement

    INT       shift, and go to state 5
    BYTE      shift, and go to state 6
    BOOL      shift, and go to state 7
    RETURN    shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    ID        shift, and go to state 32

    WHILE     reduce using rule 36 (M_WHILE_SCOPE)
    LBRACE    reduce using rule 39 (N)
    $default  reduce using rule 33 (M_IF_SCOPE)

    statement      go to state 74
    IF_SCOPE       go to state 35
    M_IF_SCOPE     go to state 36
    WHILE_SCOPE    go to state 37
    M_WHILE_SCOPE  go to state 38
    N              go to state 39
    call           go to state 40
    type           go to state 41


State 66

   32 IF_SCOPE: M_IF_SCOPE IF LPAREN . exp $@2 RPAREN statement

    NUM  shift, and go to state 42

    exp  go to state 75


State 67

   35 WHILE_SCOPE: M_WHILE_SCOPE WHILE LPAREN . exp $@3 RPAREN statement

    NUM  shift, and go to state 42

    exp  go to state 76


State 68

   18 statements: statements . statement
   19 statement: N LBRACE statements . RBRACE

    INT       shift, and go to state 5
    BYTE      shift, and go to state 6
    BOOL      shift, and go to state 7
    RETURN    shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    RBRACE    shift, and go to state 77
    ID        shift, and go to state 32

    WHILE     reduce using rule 36 (M_WHILE_SCOPE)
    LBRACE    reduce using rule 39 (N)
    $default  reduce using rule 33 (M_IF_SCOPE)

    statement      go to state 51
    IF_SCOPE       go to state 35
    M_IF_SCOPE     go to state 36
    WHILE_SCOPE    go to state 37
    M_WHILE_SCOPE  go to state 38
    N              go to state 39
    call           go to state 40
    type           go to state 41


State 69

   20 statement: type ID SC .

    $default  reduce using rule 20 (statement)


State 70

   21 statement: type ID ASSIGN . exp SC

    NUM  shift, and go to state 42

    exp  go to state 78


State 71

   22 statement: ID ASSIGN exp SC .

    $default  reduce using rule 22 (statement)


State 72

   40 call: ID LPAREN explist RPAREN .

    $default  reduce using rule 40 (call)


State 73

   43 explist: exp COMMA . explist

    NUM  shift, and go to state 42

    explist  go to state 79
    exp      go to state 64


State 74

   37 ELSE_SCOPE: ELSE M_ELSE_SCOPE statement .

    $default  reduce using rule 37 (ELSE_SCOPE)


State 75

   32 IF_SCOPE: M_IF_SCOPE IF LPAREN exp . $@2 RPAREN statement

    $default  reduce using rule 31 ($@2)

    $@2  go to state 80


State 76

   35 WHILE_SCOPE: M_WHILE_SCOPE WHILE LPAREN exp . $@3 RPAREN statement

    $default  reduce using rule 34 ($@3)

    $@3  go to state 81


State 77

   19 statement: N LBRACE statements RBRACE .

    $default  reduce using rule 19 (statement)


State 78

   21 statement: type ID ASSIGN exp . SC

    SC  shift, and go to state 82


State 79

   43 explist: exp COMMA explist .

    $default  reduce using rule 43 (explist)


State 80

   32 IF_SCOPE: M_IF_SCOPE IF LPAREN exp $@2 . RPAREN statement

    RPAREN  shift, and go to state 83


State 81

   35 WHILE_SCOPE: M_WHILE_SCOPE WHILE LPAREN exp $@3 . RPAREN statement

    RPAREN  shift, and go to state 84


State 82

   21 statement: type ID ASSIGN exp SC .

    $default  reduce using rule 21 (statement)


State 83

   32 IF_SCOPE: M_IF_SCOPE IF LPAREN exp $@2 RPAREN . statement

    INT       shift, and go to state 5
    BYTE      shift, and go to state 6
    BOOL      shift, and go to state 7
    RETURN    shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    ID        shift, and go to state 32

    WHILE     reduce using rule 36 (M_WHILE_SCOPE)
    LBRACE    reduce using rule 39 (N)
    $default  reduce using rule 33 (M_IF_SCOPE)

    statement      go to state 85
    IF_SCOPE       go to state 35
    M_IF_SCOPE     go to state 36
    WHILE_SCOPE    go to state 37
    M_WHILE_SCOPE  go to state 38
    N              go to state 39
    call           go to state 40
    type           go to state 41


State 84

   35 WHILE_SCOPE: M_WHILE_SCOPE WHILE LPAREN exp $@3 RPAREN . statement

    INT       shift, and go to state 5
    BYTE      shift, and go to state 6
    BOOL      shift, and go to state 7
    RETURN    shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    ID        shift, and go to state 32

    WHILE     reduce using rule 36 (M_WHILE_SCOPE)
    LBRACE    reduce using rule 39 (N)
    $default  reduce using rule 33 (M_IF_SCOPE)

    statement      go to state 86
    IF_SCOPE       go to state 35
    M_IF_SCOPE     go to state 36
    WHILE_SCOPE    go to state 37
    M_WHILE_SCOPE  go to state 38
    N              go to state 39
    call           go to state 40
    type           go to state 41


State 85

   32 IF_SCOPE: M_IF_SCOPE IF LPAREN exp $@2 RPAREN statement .

    $default  reduce using rule 32 (IF_SCOPE)


State 86

   35 WHILE_SCOPE: M_WHILE_SCOPE WHILE LPAREN exp $@3 RPAREN statement .

    $default  reduce using rule 35 (WHILE_SCOPE)
